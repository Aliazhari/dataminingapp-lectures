{
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "name": "",
<<<<<<< HEAD:Lecture-3/Getting-to-know-your-data-with-Pandas.ipynb
  "signature": "sha256:e8eb97512b34e51589b5ab1e6a1f2b8852043058561b1bb5016a4522b7a3bcf0"
=======
  "signature": "sha256:f5ed88b4dff42981875f7e598ec9300263ee18a24571d9fc84f9fbd28f87c01b"
>>>>>>> L3:Lecture-3/Getting to know your data with Pandas.ipynb
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Getting to know your data with Pandas"
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "What is Pandas"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Pandas is Python Data Analysis Library. Pandas provides an R-like DataFrame, produces high quality plots with matplotlib, and integrates nicely with other libraries that expect NumPy arrays."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Getting started"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "\n",
      "import pandas as pd\n",
      "import pandas.io.data as web\n",
      "from pandas import Series, DataFrame\n",
      "\n",
      "import matplotlib.pyplot as plt\n",
      "import matplotlib as mpl\n",
      "import seaborn as sns\n",
      "\n",
      "\n",
      "from datetime import datetime\n",
      "\n",
      "#pd.__version__\n",
      "\n",
      "%matplotlib inline"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Fetching storing and retrieving your data"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "More information on what types of data you can fetch\n",
      "\n",
      "http://pandas.pydata.org/pandas-docs/stable/remote_data.html"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#yahoo data\n",
      "#stocks = ['ORCL', 'TSLA', 'IBM','YELP', 'MSFT']\n",
      "stocks = 'YELP'\n",
      "#ls_key = 'Adj Close'\n",
      "#yahoo_stocks = pd.io.data.DataReader(stocks,'yahoo', \n",
      "#                                 start=datetime.datetime(2014, 1, 1), \n",
      "#                                 end=datetime.datetime(2014, 12, 31))\n",
      "\n",
      "yahoo_stocks = pd.io.data.get_data_yahoo(stocks)\n",
      "#                                 start=datetime.datetime(2011, 10, 1), \n",
      "#                                 end=datetime.datetime(2014, 12, 31))\n",
      "\n",
      "#yahoo_stocks.head()\n",
      "yahoo_stocks.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "DatetimeIndex: 740 entries, 2012-03-02 00:00:00 to 2015-02-10 00:00:00\n",
        "Data columns (total 6 columns):\n",
        "Open         740 non-null float64\n",
        "High         740 non-null float64\n",
        "Low          740 non-null float64\n",
        "Close        740 non-null float64\n",
        "Volume       740 non-null int64\n",
        "Adj Close    740 non-null float64\n",
        "dtypes: float64(5), int64(1)\n",
        "memory usage: 40.5 KB\n"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "More on pandas data frames: \n",
      "\n",
      "\n",
      "http://pandas.pydata.org/pandas-docs/dev/generated/pandas.DataFrame.html"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Reading data from a .csv file"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Some basic commands for reading and getting to know the characteristics of your data"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "yahoo_stocks.to_csv('yahoo_data.csv')\n",
      "#print(open('yahoo_data.csv').read())\n",
      "df = pd.read_csv('yahoo_data.csv')#, index_col='Date', infer_datetime_format=True, parse_dates=True)\n",
      "#print df.head()\n",
      "#print df.info()\n",
      "#print df.index\n",
      "print df"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "           Date   Open   High    Low  Close    Volume  Adj Close\n",
        "0    2012-03-02  22.01  26.00  22.00  24.58   4809400      24.58\n",
        "1    2012-03-05  24.85  24.86  20.90  20.99   2988200      20.99\n",
        "2    2012-03-06  19.83  20.50  19.36  20.50   1154300      20.50\n",
        "3    2012-03-07  20.45  20.63  19.95  20.25    444800      20.25\n",
        "4    2012-03-08  20.30  20.39  19.96  20.00    436900      20.00\n",
        "5    2012-03-09  20.00  20.10  19.50  19.80    668200      19.80\n",
        "6    2012-03-12  19.80  22.49  19.52  22.49   1358200      22.49\n",
        "7    2012-03-13  22.55  24.40  22.20  23.30   2053900      23.30\n",
        "8    2012-03-14  23.27  23.35  22.20  22.32    589600      22.32\n",
        "9    2012-03-15  22.45  23.29  21.36  21.75    875600      21.75\n",
        "10   2012-03-16  21.93  22.17  21.06  21.74    433600      21.74\n",
        "11   2012-03-19  22.20  23.93  21.70  22.99    858400      22.99\n",
        "12   2012-03-20  23.15  23.47  22.10  22.90    782200      22.90\n",
        "13   2012-03-21  23.00  24.10  22.68  23.12   1375000      23.12\n",
        "14   2012-03-22  23.32  23.32  22.44  23.22    370800      23.22\n",
        "15   2012-03-23  23.22  23.25  22.30  23.18    307000      23.18\n",
        "16   2012-03-26  23.26  24.88  23.01  24.60   1052000      24.60\n",
        "17   2012-03-27  24.80  27.75  24.25  27.65   3141300      27.65\n",
        "18   2012-03-28  27.52  31.96  27.10  28.09   5267300      28.09\n",
        "19   2012-03-29  27.99  29.78  27.58  28.01   1425200      28.01\n",
        "20   2012-03-30  28.58  29.27  25.82  26.89   1887200      26.89\n",
        "21   2012-04-02  26.90  27.80  25.27  27.12   1166500      27.12\n",
        "22   2012-04-03  27.20  28.40  25.92  26.70   1384800      26.70\n",
        "23   2012-04-04  25.94  27.00  25.94  26.16    440700      26.16\n",
        "24   2012-04-05  25.96  26.40  24.02  24.17   1352200      24.17\n",
        "25   2012-04-09  23.86  25.58  22.74  25.22   1397800      25.22\n",
        "26   2012-04-10  25.45  26.51  24.50  25.81   1027500      25.81\n",
        "27   2012-04-11  25.47  26.25  24.57  25.43   1004200      25.43\n",
        "28   2012-04-12  25.21  26.44  25.17  26.20    728000      26.20\n",
        "29   2012-04-13  26.00  26.97  25.44  26.33    508200      26.33\n",
        "..          ...    ...    ...    ...    ...       ...        ...\n",
        "710  2014-12-29  52.77  53.86  52.52  53.01   1181500      53.01\n",
        "711  2014-12-30  53.09  54.95  52.85  54.24   2336800      54.24\n",
        "712  2014-12-31  54.71  55.57  54.16  54.73   1858000      54.73\n",
        "713  2015-01-02  55.46  55.60  54.24  55.15   1664500      55.15\n",
        "714  2015-01-05  54.54  54.95  52.33  52.53   2023000      52.53\n",
        "715  2015-01-06  52.55  53.93  50.75  52.44   3751200      52.44\n",
        "716  2015-01-07  53.32  53.75  51.76  52.21   1548200      52.21\n",
        "717  2015-01-08  52.59  54.14  51.76  53.83   2015300      53.83\n",
        "718  2015-01-09  55.96  56.99  54.72  56.07   6222600      56.07\n",
        "719  2015-01-12  56.00  56.06  53.43  54.02   2405100      54.02\n",
        "720  2015-01-13  54.47  54.80  52.52  53.18   1952100      53.18\n",
        "721  2015-01-14  52.80  53.68  51.46  52.20   1846100      52.20\n",
        "722  2015-01-15  53.00  53.61  50.03  50.12   2640400      50.12\n",
        "723  2015-01-16  50.18  51.49  50.03  51.39   2182300      51.39\n",
        "724  2015-01-20  51.65  51.78  50.69  51.41   1227600      51.41\n",
        "725  2015-01-21  51.20  53.50  51.20  53.41   3228700      53.41\n",
        "726  2015-01-22  53.87  55.28  53.12  54.80   2295400      54.80\n",
        "727  2015-01-23  54.66  55.64  54.30  55.19   1629000      55.19\n",
        "728  2015-01-26  55.12  55.79  54.83  55.41   1450300      55.41\n",
        "729  2015-01-27  56.06  56.16  54.57  55.63   2403700      55.63\n",
        "730  2015-01-28  56.15  56.15  52.92  53.00   2002700      53.00\n",
        "731  2015-01-29  52.85  53.31  51.41  52.93   1838000      52.93\n",
        "732  2015-01-30  52.59  53.42  52.05  52.47   1873900      52.47\n",
        "733  2015-02-02  52.94  53.50  51.21  53.47   2105500      53.47\n",
        "734  2015-02-03  53.83  55.93  53.41  55.78   2876400      55.78\n",
        "735  2015-02-04  55.53  57.07  55.25  56.74   2494400      56.74\n",
        "736  2015-02-05  57.60  57.70  56.08  57.47   4195400      57.47\n",
        "737  2015-02-06  47.70  48.17  44.86  45.11  25137400      45.11\n",
        "738  2015-02-09  44.91  45.04  42.10  42.17  13044700      42.17\n",
        "739  2015-02-10  43.83  45.55  43.31  44.66  11247800      44.66\n",
        "\n",
        "[740 rows x 7 columns]\n"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#The number of tuples in your data\n",
      "print len(df)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "740\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Playing with data columns"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#The columns/features of your data\n",
      "print df.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Index([u'Date', u'Open', u'High', u'Low', u'Close', u'Volume', u'Adj Close'], dtype='object')\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#Selecting a single column from your data\n",
      "print df['Open']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0     22.01\n",
        "1     24.85\n",
        "2     19.83\n",
        "3     20.45\n",
        "4     20.30\n",
        "5     20.00\n",
        "6     19.80\n",
        "7     22.55\n",
        "8     23.27\n",
        "9     22.45\n",
        "10    21.93\n",
        "11    22.20\n",
        "12    23.15\n",
        "13    23.00\n",
        "14    23.32\n",
        "...\n",
        "725    51.20\n",
        "726    53.87\n",
        "727    54.66\n",
        "728    55.12\n",
        "729    56.06\n",
        "730    56.15\n",
        "731    52.85\n",
        "732    52.59\n",
        "733    52.94\n",
        "734    53.83\n",
        "735    55.53\n",
        "736    57.60\n",
        "737    47.70\n",
        "738    44.91\n",
        "739    43.83\n",
        "Name: Open, Length: 740, dtype: float64\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#Another way of selecting a single column from your data\n",
      "print df.Open"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0     22.01\n",
        "1     24.85\n",
        "2     19.83\n",
        "3     20.45\n",
        "4     20.30\n",
        "5     20.00\n",
        "6     19.80\n",
        "7     22.55\n",
        "8     23.27\n",
        "9     22.45\n",
        "10    21.93\n",
        "11    22.20\n",
        "12    23.15\n",
        "13    23.00\n",
        "14    23.32\n",
        "...\n",
        "725    51.20\n",
        "726    53.87\n",
        "727    54.66\n",
        "728    55.12\n",
        "729    56.06\n",
        "730    56.15\n",
        "731    52.85\n",
        "732    52.59\n",
        "733    52.94\n",
        "734    53.83\n",
        "735    55.53\n",
        "736    57.60\n",
        "737    47.70\n",
        "738    44.91\n",
        "739    43.83\n",
        "Name: Open, Length: 740, dtype: float64\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print df.columns\n",
      "print (df[['Open','Close']]).info()\n",
      "#print df[['Open','Close']]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Index([u'Date', u'Open', u'High', u'Low', u'Close', u'Volume', u'Adj Close'], dtype='object')\n",
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 740 entries, 0 to 739\n",
        "Data columns (total 2 columns):\n",
        "Open     740 non-null float64\n",
        "Close    740 non-null float64\n",
        "dtypes: float64(2)\n",
        "memory usage: 17.3 KB\n",
        "None\n"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print df.Date.head(10)\n",
      "print df.Date.tail(10)\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0    2012-03-02\n",
        "1    2012-03-05\n",
        "2    2012-03-06\n",
        "3    2012-03-07\n",
        "4    2012-03-08\n",
        "5    2012-03-09\n",
        "6    2012-03-12\n",
        "7    2012-03-13\n",
        "8    2012-03-14\n",
        "9    2012-03-15\n",
        "Name: Date, dtype: object\n",
        "730    2015-01-28\n",
        "731    2015-01-29\n",
        "732    2015-01-30\n",
        "733    2015-02-02\n",
        "734    2015-02-03\n",
        "735    2015-02-04\n",
        "736    2015-02-05\n",
        "737    2015-02-06\n",
        "738    2015-02-09\n",
        "739    2015-02-10\n",
        "Name: Date, dtype: object\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#alternative\n",
      "print df['Date'].head(10)\n",
      "print df['Date'].tail(10)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0    2012-03-02\n",
        "1    2012-03-05\n",
        "2    2012-03-06\n",
        "3    2012-03-07\n",
        "4    2012-03-08\n",
        "5    2012-03-09\n",
        "6    2012-03-12\n",
        "7    2012-03-13\n",
        "8    2012-03-14\n",
        "9    2012-03-15\n",
        "Name: Date, dtype: object\n",
        "730    2015-01-28\n",
        "731    2015-01-29\n",
        "732    2015-01-30\n",
        "733    2015-02-02\n",
        "734    2015-02-03\n",
        "735    2015-02-04\n",
        "736    2015-02-05\n",
        "737    2015-02-06\n",
        "738    2015-02-09\n",
        "739    2015-02-10\n",
        "Name: Date, dtype: object\n"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Changing the column names"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "new_column_names = [ x.lower().replace(' ','_') for x in df.columns]\n",
      "new_column_names\n",
      "df.columns = new_column_names\n",
      "print df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 740 entries, 0 to 739\n",
        "Data columns (total 7 columns):\n",
        "date         740 non-null object\n",
        "open         740 non-null float64\n",
        "high         740 non-null float64\n",
        "low          740 non-null float64\n",
        "close        740 non-null float64\n",
        "volume       740 non-null int64\n",
        "adj_close    740 non-null float64\n",
        "dtypes: float64(5), int64(1), object(1)\n",
        "memory usage: 46.2+ KB\n",
        "None\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now **all** columns can be accessed using the **dot** notation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print df.adj_close"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0     24.58\n",
        "1     20.99\n",
        "2     20.50\n",
        "3     20.25\n",
        "4     20.00\n",
        "5     19.80\n",
        "6     22.49\n",
        "7     23.30\n",
        "8     22.32\n",
        "9     21.75\n",
        "10    21.74\n",
        "11    22.99\n",
        "12    22.90\n",
        "13    23.12\n",
        "14    23.22\n",
        "...\n",
        "725    53.41\n",
        "726    54.80\n",
        "727    55.19\n",
        "728    55.41\n",
        "729    55.63\n",
        "730    53.00\n",
        "731    52.93\n",
        "732    52.47\n",
        "733    53.47\n",
        "734    55.78\n",
        "735    56.74\n",
        "736    57.47\n",
        "737    45.11\n",
        "738    42.17\n",
        "739    44.66\n",
        "Name: adj_close, Length: 740, dtype: float64\n"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print df.adj_close.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0    24.58\n",
        "1    20.99\n",
        "2    20.50\n",
        "3    20.25\n",
        "4    20.00\n",
        "Name: adj_close, dtype: float64\n"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can now apply methods on different columns"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print df.mean()\n",
      "#df.std()\n",
      "#df.median()\n",
      "#df.open.mean()\n",
      "#df.high.mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "open              46.710108\n",
        "high              47.831797\n",
        "low               45.503432\n",
        "close             46.648000\n",
        "volume       2640113.648649\n",
        "adj_close         46.648000\n",
        "dtype: float64\n"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Plotting some columns"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df.adj_close.plot(label='adj')\n",
      "df.low.plot(label='close')\n",
      "#df.low.plot()\n",
      "plt.legend(loc=2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "<matplotlib.legend.Legend at 0x10a503410>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10a503050>"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df.adj_close.hist()\n",
      "#df.volume.hist()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "<matplotlib.axes._subplots.AxesSubplot at 0x10a48ba10>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10a326d90>"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Bulk Operations"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Methods like **sum( )** and **std( )** work on entire columns. We can run our own functions across all values in a column (or row) using **apply( )**."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print df.date.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0    2012-03-02\n",
        "1    2012-03-05\n",
        "2    2012-03-06\n",
        "3    2012-03-07\n",
        "4    2012-03-08\n",
        "Name: date, dtype: object\n"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "The **values** property of the column returns a list of values for the column. Inspecting the first value reveals that these are strings with a particular format."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print df.date.values\n",
      "first_date = df.date.values[0]\n",
      "print first_date"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['2012-03-02' '2012-03-05' '2012-03-06' '2012-03-07' '2012-03-08'\n",
        " '2012-03-09' '2012-03-12' '2012-03-13' '2012-03-14' '2012-03-15'\n",
        " '2012-03-16' '2012-03-19' '2012-03-20' '2012-03-21' '2012-03-22'\n",
        " '2012-03-23' '2012-03-26' '2012-03-27' '2012-03-28' '2012-03-29'\n",
        " '2012-03-30' '2012-04-02' '2012-04-03' '2012-04-04' '2012-04-05'\n",
        " '2012-04-09' '2012-04-10' '2012-04-11' '2012-04-12' '2012-04-13'\n",
        " '2012-04-16' '2012-04-17' '2012-04-18' '2012-04-19' '2012-04-20'\n",
        " '2012-04-23' '2012-04-24' '2012-04-25' '2012-04-26' '2012-04-27'\n",
        " '2012-04-30' '2012-05-01' '2012-05-02' '2012-05-03' '2012-05-04'\n",
        " '2012-05-07' '2012-05-08' '2012-05-09' '2012-05-10' '2012-05-11'\n",
        " '2012-05-14' '2012-05-15' '2012-05-16' '2012-05-17' '2012-05-18'\n",
        " '2012-05-21' '2012-05-22' '2012-05-23' '2012-05-24' '2012-05-25'\n",
        " '2012-05-29' '2012-05-30' '2012-05-31' '2012-06-01' '2012-06-04'\n",
        " '2012-06-05' '2012-06-06' '2012-06-07' '2012-06-08' '2012-06-11'\n",
        " '2012-06-12' '2012-06-13' '2012-06-14' '2012-06-15' '2012-06-18'\n",
        " '2012-06-19' '2012-06-20' '2012-06-21' '2012-06-22' '2012-06-25'\n",
        " '2012-06-26' '2012-06-27' '2012-06-28' '2012-06-29' '2012-07-02'\n",
        " '2012-07-03' '2012-07-05' '2012-07-06' '2012-07-09' '2012-07-10'\n",
        " '2012-07-11' '2012-07-12' '2012-07-13' '2012-07-16' '2012-07-17'\n",
        " '2012-07-18' '2012-07-19' '2012-07-20' '2012-07-23' '2012-07-24'\n",
        " '2012-07-25' '2012-07-26' '2012-07-27' '2012-07-30' '2012-07-31'\n",
        " '2012-08-01' '2012-08-02' '2012-08-03' '2012-08-06' '2012-08-07'\n",
        " '2012-08-08' '2012-08-09' '2012-08-10' '2012-08-13' '2012-08-14'\n",
        " '2012-08-15' '2012-08-16' '2012-08-17' '2012-08-20' '2012-08-21'\n",
        " '2012-08-22' '2012-08-23' '2012-08-24' '2012-08-27' '2012-08-28'\n",
        " '2012-08-29' '2012-08-30' '2012-08-31' '2012-09-04' '2012-09-05'\n",
        " '2012-09-06' '2012-09-07' '2012-09-10' '2012-09-11' '2012-09-12'\n",
        " '2012-09-13' '2012-09-14' '2012-09-17' '2012-09-18' '2012-09-19'\n",
        " '2012-09-20' '2012-09-21' '2012-09-24' '2012-09-25' '2012-09-26'\n",
        " '2012-09-27' '2012-09-28' '2012-10-01' '2012-10-02' '2012-10-03'\n",
        " '2012-10-04' '2012-10-05' '2012-10-08' '2012-10-09' '2012-10-10'\n",
        " '2012-10-11' '2012-10-12' '2012-10-15' '2012-10-16' '2012-10-17'\n",
        " '2012-10-18' '2012-10-19' '2012-10-22' '2012-10-23' '2012-10-24'\n",
        " '2012-10-25' '2012-10-26' '2012-10-31' '2012-11-01' '2012-11-02'\n",
        " '2012-11-05' '2012-11-06' '2012-11-07' '2012-11-08' '2012-11-09'\n",
        " '2012-11-12' '2012-11-13' '2012-11-14' '2012-11-15' '2012-11-16'\n",
        " '2012-11-19' '2012-11-20' '2012-11-21' '2012-11-23' '2012-11-26'\n",
        " '2012-11-27' '2012-11-28' '2012-11-29' '2012-11-30' '2012-12-03'\n",
        " '2012-12-04' '2012-12-05' '2012-12-06' '2012-12-07' '2012-12-10'\n",
        " '2012-12-11' '2012-12-12' '2012-12-13' '2012-12-14' '2012-12-17'\n",
        " '2012-12-18' '2012-12-19' '2012-12-20' '2012-12-21' '2012-12-24'\n",
        " '2012-12-26' '2012-12-27' '2012-12-28' '2012-12-31' '2013-01-02'\n",
        " '2013-01-03' '2013-01-04' '2013-01-07' '2013-01-08' '2013-01-09'\n",
        " '2013-01-10' '2013-01-11' '2013-01-14' '2013-01-15' '2013-01-16'\n",
        " '2013-01-17' '2013-01-18' '2013-01-22' '2013-01-23' '2013-01-24'\n",
        " '2013-01-25' '2013-01-28' '2013-01-29' '2013-01-30' '2013-01-31'\n",
        " '2013-02-01' '2013-02-04' '2013-02-05' '2013-02-06' '2013-02-07'\n",
        " '2013-02-08' '2013-02-11' '2013-02-12' '2013-02-13' '2013-02-14'\n",
        " '2013-02-15' '2013-02-19' '2013-02-20' '2013-02-21' '2013-02-22'\n",
        " '2013-02-25' '2013-02-26' '2013-02-27' '2013-02-28' '2013-03-01'\n",
        " '2013-03-04' '2013-03-05' '2013-03-06' '2013-03-07' '2013-03-08'\n",
        " '2013-03-11' '2013-03-12' '2013-03-13' '2013-03-14' '2013-03-15'\n",
        " '2013-03-18' '2013-03-19' '2013-03-20' '2013-03-21' '2013-03-22'\n",
        " '2013-03-25' '2013-03-26' '2013-03-27' '2013-03-28' '2013-04-01'\n",
        " '2013-04-02' '2013-04-03' '2013-04-04' '2013-04-05' '2013-04-08'\n",
        " '2013-04-09' '2013-04-10' '2013-04-11' '2013-04-12' '2013-04-15'\n",
        " '2013-04-16' '2013-04-17' '2013-04-18' '2013-04-19' '2013-04-22'\n",
        " '2013-04-23' '2013-04-24' '2013-04-25' '2013-04-26' '2013-04-29'\n",
        " '2013-04-30' '2013-05-01' '2013-05-02' '2013-05-03' '2013-05-06'\n",
        " '2013-05-07' '2013-05-08' '2013-05-09' '2013-05-10' '2013-05-13'\n",
        " '2013-05-14' '2013-05-15' '2013-05-16' '2013-05-17' '2013-05-20'\n",
        " '2013-05-21' '2013-05-22' '2013-05-23' '2013-05-24' '2013-05-28'\n",
        " '2013-05-29' '2013-05-30' '2013-05-31' '2013-06-03' '2013-06-04'\n",
        " '2013-06-05' '2013-06-06' '2013-06-07' '2013-06-10' '2013-06-11'\n",
        " '2013-06-12' '2013-06-13' '2013-06-14' '2013-06-17' '2013-06-18'\n",
        " '2013-06-19' '2013-06-20' '2013-06-21' '2013-06-24' '2013-06-25'\n",
        " '2013-06-26' '2013-06-27' '2013-06-28' '2013-07-01' '2013-07-02'\n",
        " '2013-07-03' '2013-07-05' '2013-07-08' '2013-07-09' '2013-07-10'\n",
        " '2013-07-11' '2013-07-12' '2013-07-15' '2013-07-16' '2013-07-17'\n",
        " '2013-07-18' '2013-07-19' '2013-07-22' '2013-07-23' '2013-07-24'\n",
        " '2013-07-25' '2013-07-26' '2013-07-29' '2013-07-30' '2013-07-31'\n",
        " '2013-08-01' '2013-08-02' '2013-08-05' '2013-08-06' '2013-08-07'\n",
        " '2013-08-08' '2013-08-09' '2013-08-12' '2013-08-13' '2013-08-14'\n",
        " '2013-08-15' '2013-08-16' '2013-08-19' '2013-08-20' '2013-08-21'\n",
        " '2013-08-22' '2013-08-23' '2013-08-26' '2013-08-27' '2013-08-28'\n",
        " '2013-08-29' '2013-08-30' '2013-09-03' '2013-09-04' '2013-09-05'\n",
        " '2013-09-06' '2013-09-09' '2013-09-10' '2013-09-11' '2013-09-12'\n",
        " '2013-09-13' '2013-09-16' '2013-09-17' '2013-09-18' '2013-09-19'\n",
        " '2013-09-20' '2013-09-23' '2013-09-24' '2013-09-25' '2013-09-26'\n",
        " '2013-09-27' '2013-09-30' '2013-10-01' '2013-10-02' '2013-10-03'\n",
        " '2013-10-04' '2013-10-07' '2013-10-08' '2013-10-09' '2013-10-10'\n",
        " '2013-10-11' '2013-10-14' '2013-10-15' '2013-10-16' '2013-10-17'\n",
        " '2013-10-18' '2013-10-21' '2013-10-22' '2013-10-23' '2013-10-24'\n",
        " '2013-10-25' '2013-10-28' '2013-10-29' '2013-10-30' '2013-10-31'\n",
        " '2013-11-01' '2013-11-04' '2013-11-05' '2013-11-06' '2013-11-07'\n",
        " '2013-11-08' '2013-11-11' '2013-11-12' '2013-11-13' '2013-11-14'\n",
        " '2013-11-15' '2013-11-18' '2013-11-19' '2013-11-20' '2013-11-21'\n",
        " '2013-11-22' '2013-11-25' '2013-11-26' '2013-11-27' '2013-11-29'\n",
        " '2013-12-02' '2013-12-03' '2013-12-04' '2013-12-05' '2013-12-06'\n",
        " '2013-12-09' '2013-12-10' '2013-12-11' '2013-12-12' '2013-12-13'\n",
        " '2013-12-16' '2013-12-17' '2013-12-18' '2013-12-19' '2013-12-20'\n",
        " '2013-12-23' '2013-12-24' '2013-12-26' '2013-12-27' '2013-12-30'\n",
        " '2013-12-31' '2014-01-02' '2014-01-03' '2014-01-06' '2014-01-07'\n",
        " '2014-01-08' '2014-01-09' '2014-01-10' '2014-01-13' '2014-01-14'\n",
        " '2014-01-15' '2014-01-16' '2014-01-17' '2014-01-21' '2014-01-22'\n",
        " '2014-01-23' '2014-01-24' '2014-01-27' '2014-01-28' '2014-01-29'\n",
        " '2014-01-30' '2014-01-31' '2014-02-03' '2014-02-04' '2014-02-05'\n",
        " '2014-02-06' '2014-02-07' '2014-02-10' '2014-02-11' '2014-02-12'\n",
        " '2014-02-13' '2014-02-14' '2014-02-18' '2014-02-19' '2014-02-20'\n",
        " '2014-02-21' '2014-02-24' '2014-02-25' '2014-02-26' '2014-02-27'\n",
        " '2014-02-28' '2014-03-03' '2014-03-04' '2014-03-05' '2014-03-06'\n",
        " '2014-03-07' '2014-03-10' '2014-03-11' '2014-03-12' '2014-03-13'\n",
        " '2014-03-14' '2014-03-17' '2014-03-18' '2014-03-19' '2014-03-20'\n",
        " '2014-03-21' '2014-03-24' '2014-03-25' '2014-03-26' '2014-03-27'\n",
        " '2014-03-28' '2014-03-31' '2014-04-01' '2014-04-02' '2014-04-03'\n",
        " '2014-04-04' '2014-04-07' '2014-04-08' '2014-04-09' '2014-04-10'\n",
        " '2014-04-11' '2014-04-14' '2014-04-15' '2014-04-16' '2014-04-17'\n",
        " '2014-04-21' '2014-04-22' '2014-04-23' '2014-04-24' '2014-04-25'\n",
        " '2014-04-28' '2014-04-29' '2014-04-30' '2014-05-01' '2014-05-02'\n",
        " '2014-05-05' '2014-05-06' '2014-05-07' '2014-05-08' '2014-05-09'\n",
        " '2014-05-12' '2014-05-13' '2014-05-14' '2014-05-15' '2014-05-16'\n",
        " '2014-05-19' '2014-05-20' '2014-05-21' '2014-05-22' '2014-05-23'\n",
        " '2014-05-27' '2014-05-28' '2014-05-29' '2014-05-30' '2014-06-02'\n",
        " '2014-06-03' '2014-06-04' '2014-06-05' '2014-06-06' '2014-06-09'\n",
        " '2014-06-10' '2014-06-11' '2014-06-12' '2014-06-13' '2014-06-16'\n",
        " '2014-06-17' '2014-06-18' '2014-06-19' '2014-06-20' '2014-06-23'\n",
        " '2014-06-24' '2014-06-25' '2014-06-26' '2014-06-27' '2014-06-30'\n",
        " '2014-07-01' '2014-07-02' '2014-07-03' '2014-07-07' '2014-07-08'\n",
        " '2014-07-09' '2014-07-10' '2014-07-11' '2014-07-14' '2014-07-15'\n",
        " '2014-07-16' '2014-07-17' '2014-07-18' '2014-07-21' '2014-07-22'\n",
        " '2014-07-23' '2014-07-24' '2014-07-25' '2014-07-28' '2014-07-29'\n",
        " '2014-07-30' '2014-07-31' '2014-08-01' '2014-08-04' '2014-08-05'\n",
        " '2014-08-06' '2014-08-07' '2014-08-08' '2014-08-11' '2014-08-12'\n",
        " '2014-08-13' '2014-08-14' '2014-08-15' '2014-08-18' '2014-08-19'\n",
        " '2014-08-20' '2014-08-21' '2014-08-22' '2014-08-25' '2014-08-26'\n",
        " '2014-08-27' '2014-08-28' '2014-08-29' '2014-09-02' '2014-09-03'\n",
        " '2014-09-04' '2014-09-05' '2014-09-08' '2014-09-09' '2014-09-10'\n",
        " '2014-09-11' '2014-09-12' '2014-09-15' '2014-09-16' '2014-09-17'\n",
        " '2014-09-18' '2014-09-19' '2014-09-22' '2014-09-23' '2014-09-24'\n",
        " '2014-09-25' '2014-09-26' '2014-09-29' '2014-09-30' '2014-10-01'\n",
        " '2014-10-02' '2014-10-03' '2014-10-06' '2014-10-07' '2014-10-08'\n",
        " '2014-10-09' '2014-10-10' '2014-10-13' '2014-10-14' '2014-10-15'\n",
        " '2014-10-16' '2014-10-17' '2014-10-20' '2014-10-21' '2014-10-22'\n",
        " '2014-10-23' '2014-10-24' '2014-10-27' '2014-10-28' '2014-10-29'\n",
        " '2014-10-30' '2014-10-31' '2014-11-03' '2014-11-04' '2014-11-05'\n",
        " '2014-11-06' '2014-11-07' '2014-11-10' '2014-11-11' '2014-11-12'\n",
        " '2014-11-13' '2014-11-14' '2014-11-17' '2014-11-18' '2014-11-19'\n",
        " '2014-11-20' '2014-11-21' '2014-11-24' '2014-11-25' '2014-11-26'\n",
        " '2014-11-28' '2014-12-01' '2014-12-02' '2014-12-03' '2014-12-04'\n",
        " '2014-12-05' '2014-12-08' '2014-12-09' '2014-12-10' '2014-12-11'\n",
        " '2014-12-12' '2014-12-15' '2014-12-16' '2014-12-17' '2014-12-18'\n",
        " '2014-12-19' '2014-12-22' '2014-12-23' '2014-12-24' '2014-12-26'\n",
        " '2014-12-29' '2014-12-30' '2014-12-31' '2015-01-02' '2015-01-05'\n",
        " '2015-01-06' '2015-01-07' '2015-01-08' '2015-01-09' '2015-01-12'\n",
        " '2015-01-13' '2015-01-14' '2015-01-15' '2015-01-16' '2015-01-20'\n",
        " '2015-01-21' '2015-01-22' '2015-01-23' '2015-01-26' '2015-01-27'\n",
        " '2015-01-28' '2015-01-29' '2015-01-30' '2015-02-02' '2015-02-03'\n",
        " '2015-02-04' '2015-02-05' '2015-02-06' '2015-02-09' '2015-02-10']\n",
        "2012-03-02\n"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "datetime.strptime(first_date, \"%Y-%m-%d\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "datetime.datetime(2012, 3, 2, 0, 0)"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df.date = df.date.apply(lambda d: datetime.strptime(d, \"%Y-%m-%d\"))\n",
      "print df.date.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0   2012-03-02\n",
        "1   2012-03-05\n",
        "2   2012-03-06\n",
        "3   2012-03-07\n",
        "4   2012-03-08\n",
        "Name: date, dtype: datetime64[ns]\n"
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Each row in a DataFrame is associated with an index, which is a label that uniquely identifies a row.\n",
      "\n",
      "The row indices so far have been auto-generated by pandas, and are simply integers starting from 0. From now on we will use dates instead of integers for indices-- the benefits of this will show later. Overwriting the index is as easy as assigning to the index property of the DataFrame.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df.index = df.date\n",
      "print df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "DatetimeIndex: 740 entries, 2012-03-02 00:00:00 to 2015-02-10 00:00:00\n",
        "Data columns (total 7 columns):\n",
        "date         740 non-null datetime64[ns]\n",
        "open         740 non-null float64\n",
        "high         740 non-null float64\n",
        "low          740 non-null float64\n",
        "close        740 non-null float64\n",
        "volume       740 non-null int64\n",
        "adj_close    740 non-null float64\n",
        "dtypes: datetime64[ns](1), float64(5), int64(1)\n",
        "memory usage: 46.2 KB\n",
        "None\n"
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Accessing rows of the DataFrame using index values"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df.ix[datetime(2015,1,23,0,0)]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 25,
       "text": [
        "date         2015-01-23 00:00:00\n",
        "open                       54.66\n",
        "high                       55.64\n",
        "low                         54.3\n",
        "close                      55.19\n",
        "volume                   1629000\n",
        "adj_close                  55.19\n",
        "Name: 2015-01-23 00:00:00, dtype: object"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Accessing individual rows using iloc[ ]"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df.iloc[0,:]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "date         2012-03-02 00:00:00\n",
        "open                       22.01\n",
        "high                          26\n",
        "low                           22\n",
        "close                      24.58\n",
        "volume                   4809400\n",
        "adj_close                  24.58\n",
        "Name: 2012-03-02 00:00:00, dtype: object"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Iterating over the rows using **iterrows( )**"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "num_positive_days = 0\n",
      "for idx, row in df.iterrows():\n",
      "    if row.close > row.open:\n",
      "        num_positive_days += 1\n",
      "        \n",
      "print \"The total number of positive-gain days : \" + str(num_positive_days)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "The total number of positive-gain days : 359\n"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Droping a column"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Now that we have made an index based on date, we can drop the actual ``date\" column"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = df.drop(['date'],axis=1)\n",
      "print df.info()\n",
      "print df.columns"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "DatetimeIndex: 740 entries, 2012-03-02 00:00:00 to 2015-02-10 00:00:00\n",
        "Data columns (total 6 columns):\n",
        "open         740 non-null float64\n",
        "high         740 non-null float64\n",
        "low          740 non-null float64\n",
        "close        740 non-null float64\n",
        "volume       740 non-null int64\n",
        "adj_close    740 non-null float64\n",
        "dtypes: float64(5), int64(1)\n",
        "memory usage: 40.5 KB\n",
        "None\n",
        "Index([u'open', u'high', u'low', u'close', u'volume', u'adj_close'], dtype='object')\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Filtering"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Selecting interesting rows from the data.  All operations below return a DataFrame, which can be treated the same way as all DataFrames we have seen so far."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "positive_days = df[df.close > df.open]\n",
      "print positive_days.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "             open   high    low  close   volume  adj_close\n",
        "date                                                      \n",
        "2012-03-02  22.01  26.00  22.00  24.58  4809400      24.58\n",
        "2012-03-06  19.83  20.50  19.36  20.50  1154300      20.50\n",
        "2012-03-12  19.80  22.49  19.52  22.49  1358200      22.49\n",
        "2012-03-13  22.55  24.40  22.20  23.30  2053900      23.30\n",
        "2012-03-19  22.20  23.93  21.70  22.99   858400      22.99\n"
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "very_positive_days = df[df.close-df.open > 4]\n",
      "print len(very_positive_days)\n",
      "#print very_positive_days.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "9\n"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "tmp_high = df.high > 60\n",
      "print type(tmp_high)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.series.Series'>\n"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print tmp_high.head()\n",
      "print len(tmp_high)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "date\n",
        "2012-03-02    False\n",
        "2012-03-05    False\n",
        "2012-03-06    False\n",
        "2012-03-07    False\n",
        "2012-03-08    False\n",
        "Name: high, dtype: bool\n",
        "740\n"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Select only the rows of **df** that correspond to **tmp_high**"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print df[tmp_high]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "             open   high    low  close    volume  adj_close\n",
        "date                                                       \n",
        "2013-09-06  61.00  64.39  60.00  62.40   8792700      62.40\n",
        "2013-09-09  62.75  63.09  60.95  61.91   3833500      61.91\n",
        "2013-09-10  62.80  64.25  62.18  63.20   2920200      63.20\n",
        "2013-09-11  63.13  66.24  62.62  64.58   3554000      64.58\n",
        "2013-09-12  65.24  65.95  63.35  63.77   3566200      63.77\n",
        "2013-09-13  64.20  64.59  61.62  62.91   2436300      62.91\n",
        "2013-09-16  64.29  64.60  62.58  62.76   2406700      62.76\n",
        "2013-09-17  62.98  65.98  61.39  65.92   3019400      65.92\n",
        "2013-09-18  66.00  69.77  65.26  69.09   4971300      69.09\n",
        "2013-09-19  70.12  71.08  67.33  70.59   4768600      70.59\n",
        "2013-09-20  70.72  71.50  67.83  70.02   4647800      70.02\n",
        "2013-09-23  69.13  69.47  63.50  65.80   6079800      65.80\n",
        "2013-09-24  65.70  68.72  65.59  67.36   3110200      67.36\n",
        "2013-09-25  67.68  69.94  66.90  68.93   2425500      68.93\n",
        "2013-09-26  69.42  69.83  68.05  68.45   1978900      68.45\n",
        "2013-09-27  67.75  69.16  67.18  68.05   2144000      68.05\n",
        "2013-09-30  66.50  67.49  65.03  66.18   2405300      66.18\n",
        "2013-10-01  67.36  71.18  66.26  71.12   3792000      71.12\n",
        "2013-10-02  70.88  73.20  69.68  70.69   3729400      70.69\n",
        "2013-10-03  72.11  72.76  68.72  71.02   4468300      71.02\n",
        "2013-10-04  71.05  73.45  70.51  73.22   3423400      73.22\n",
        "2013-10-07  72.07  72.27  69.66  69.93   2856900      69.93\n",
        "2013-10-08  70.10  70.93  62.75  64.60   6796100      64.60\n",
        "2013-10-09  64.81  65.25  60.83  63.47   4700200      63.47\n",
        "2013-10-10  65.17  66.86  64.82  66.25   3235300      66.25\n",
        "2013-10-11  66.33  68.22  65.94  67.33   2115100      67.33\n",
        "2013-10-14  65.95  68.44  65.51  68.33   2452900      68.33\n",
        "2013-10-15  68.32  69.74  67.12  67.82   2510400      67.82\n",
        "2013-10-16  68.19  70.99  68.19  70.15   2599000      70.15\n",
        "2013-10-17  70.21  70.98  68.25  68.90   2797500      68.90\n",
        "...           ...    ...    ...    ...       ...        ...\n",
        "2014-09-23  71.21  72.46  69.47  71.73   2797500      71.73\n",
        "2014-09-24  72.22  73.81  71.20  72.97   3478100      72.97\n",
        "2014-09-25  72.90  73.38  70.41  70.42   2456000      70.42\n",
        "2014-09-26  70.77  71.52  70.15  70.90   1841300      70.90\n",
        "2014-09-29  69.75  71.98  69.17  69.54   3003800      69.54\n",
        "2014-09-30  70.23  70.49  67.32  68.25   3420400      68.25\n",
        "2014-10-01  68.21  68.37  66.08  67.11   2748500      67.11\n",
        "2014-10-02  66.94  69.68  66.26  69.07   2957600      69.07\n",
        "2014-10-03  70.05  71.32  69.42  69.44   2613300      69.44\n",
        "2014-10-06  69.81  70.78  68.97  69.16   1944200      69.16\n",
        "2014-10-07  68.84  70.13  68.23  68.32   2131900      68.32\n",
        "2014-10-08  68.16  70.40  66.30  70.15   2747900      70.15\n",
        "2014-10-09  70.00  72.41  69.01  69.62   4304900      69.62\n",
        "2014-10-10  70.79  70.94  65.65  66.06   3961400      66.06\n",
        "2014-10-13  66.46  66.85  61.90  62.12   4224100      62.12\n",
        "2014-10-14  62.62  66.61  62.62  65.19   3928500      65.19\n",
        "2014-10-15  63.42  67.14  62.51  66.71   4252600      66.71\n",
        "2014-10-16  64.60  68.22  64.53  67.00   2953100      67.00\n",
        "2014-10-17  68.38  68.54  66.41  67.09   2199500      67.09\n",
        "2014-10-20  67.13  68.93  66.52  68.78   2473800      68.78\n",
        "2014-10-21  69.88  71.55  69.50  71.28   3085900      71.28\n",
        "2014-10-22  72.50  73.41  69.70  70.23   8358100      70.23\n",
        "2014-10-23  61.49  62.26  56.42  57.17  27129400      57.17\n",
        "2014-10-31  58.75  60.01  57.64  60.00   4378500      60.00\n",
        "2014-11-03  60.27  63.76  59.72  61.32   6988900      61.32\n",
        "2014-11-04  60.85  62.05  60.05  60.10   2515800      60.10\n",
        "2014-11-05  60.79  60.98  57.51  57.65   3177800      57.65\n",
        "2014-11-11  59.00  62.38  58.82  62.31   3409200      62.31\n",
        "2014-11-12  61.59  61.90  59.52  60.58   3526200      60.58\n",
        "2014-11-13  60.77  61.50  57.18  58.10   4310700      58.10\n",
        "\n",
        "[278 rows x 6 columns]\n"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Creating new columns"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df['profit'] = (df.open < df.close)\n",
      "print df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "             open   high    low  close   volume  adj_close profit\n",
        "date                                                             \n",
        "2012-03-02  22.01  26.00  22.00  24.58  4809400      24.58   True\n",
        "2012-03-05  24.85  24.86  20.90  20.99  2988200      20.99  False\n",
        "2012-03-06  19.83  20.50  19.36  20.50  1154300      20.50   True\n",
        "2012-03-07  20.45  20.63  19.95  20.25   444800      20.25  False\n",
        "2012-03-08  20.30  20.39  19.96  20.00   436900      20.00  False\n"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "for idx, row in df.iterrows():\n",
      "    if row.close > row.open:\n",
      "        df.ix[idx,'gain']='negative'\n",
      "    elif (row.open - row.close) < 1:\n",
      "        df.ix[idx,'gain']='small_gain'\n",
      "    elif (row.open - row.close) < 6:\n",
      "        df.ix[idx,'gain']='medium_gain'\n",
      "    else:\n",
      "        df.ix[idx,'gain']='large_gain'\n",
      "print df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "             open   high    low  close   volume  adj_close profit         gain\n",
        "date                                                                          \n",
        "2012-03-02  22.01  26.00  22.00  24.58  4809400      24.58   True     negative\n",
        "2012-03-05  24.85  24.86  20.90  20.99  2988200      20.99  False  medium_gain\n",
        "2012-03-06  19.83  20.50  19.36  20.50  1154300      20.50   True     negative\n",
        "2012-03-07  20.45  20.63  19.95  20.25   444800      20.25  False   small_gain\n",
        "2012-03-08  20.30  20.39  19.96  20.00   436900      20.00  False   small_gain\n"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Alternatively"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def namerow(row):\n",
      "    if row.close > row.open:\n",
      "        return 'negative'\n",
      "    elif (row.open - row.close) < 1:\n",
      "        return 'small_gain'\n",
      "    elif (row.open - row.close) < 6:\n",
      "        return 'medium_gain'\n",
      "    else:\n",
      "        return 'large_gain'\n",
      "\n",
      "df['test_column'] = df.apply(namerow, axis = 1)\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "             open   high    low  close   volume  adj_close profit  \\\n",
        "date                                                                \n",
        "2012-03-02  22.01  26.00  22.00  24.58  4809400      24.58   True   \n",
        "2012-03-05  24.85  24.86  20.90  20.99  2988200      20.99  False   \n",
        "2012-03-06  19.83  20.50  19.36  20.50  1154300      20.50   True   \n",
        "2012-03-07  20.45  20.63  19.95  20.25   444800      20.25  False   \n",
        "2012-03-08  20.30  20.39  19.96  20.00   436900      20.00  False   \n",
        "\n",
        "                   gain  test_column  \n",
        "date                                  \n",
        "2012-03-02     negative     negative  \n",
        "2012-03-05  medium_gain  medium_gain  \n",
        "2012-03-06     negative     negative  \n",
        "2012-03-07   small_gain   small_gain  \n",
        "2012-03-08   small_gain   small_gain  \n"
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df.drop('test_column', axis = 1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>open</th>\n",
        "      <th>high</th>\n",
        "      <th>low</th>\n",
        "      <th>close</th>\n",
        "      <th>volume</th>\n",
        "      <th>adj_close</th>\n",
        "      <th>profit</th>\n",
        "      <th>gain</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-03-02</th>\n",
        "      <td> 22.01</td>\n",
        "      <td> 26.00</td>\n",
        "      <td> 22.00</td>\n",
        "      <td> 24.58</td>\n",
        "      <td>  4809400</td>\n",
        "      <td> 24.58</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-05</th>\n",
        "      <td> 24.85</td>\n",
        "      <td> 24.86</td>\n",
        "      <td> 20.90</td>\n",
        "      <td> 20.99</td>\n",
        "      <td>  2988200</td>\n",
        "      <td> 20.99</td>\n",
        "      <td> False</td>\n",
        "      <td> medium_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-06</th>\n",
        "      <td> 19.83</td>\n",
        "      <td> 20.50</td>\n",
        "      <td> 19.36</td>\n",
        "      <td> 20.50</td>\n",
        "      <td>  1154300</td>\n",
        "      <td> 20.50</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-07</th>\n",
        "      <td> 20.45</td>\n",
        "      <td> 20.63</td>\n",
        "      <td> 19.95</td>\n",
        "      <td> 20.25</td>\n",
        "      <td>   444800</td>\n",
        "      <td> 20.25</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-08</th>\n",
        "      <td> 20.30</td>\n",
        "      <td> 20.39</td>\n",
        "      <td> 19.96</td>\n",
        "      <td> 20.00</td>\n",
        "      <td>   436900</td>\n",
        "      <td> 20.00</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-09</th>\n",
        "      <td> 20.00</td>\n",
        "      <td> 20.10</td>\n",
        "      <td> 19.50</td>\n",
        "      <td> 19.80</td>\n",
        "      <td>   668200</td>\n",
        "      <td> 19.80</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-12</th>\n",
        "      <td> 19.80</td>\n",
        "      <td> 22.49</td>\n",
        "      <td> 19.52</td>\n",
        "      <td> 22.49</td>\n",
        "      <td>  1358200</td>\n",
        "      <td> 22.49</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-13</th>\n",
        "      <td> 22.55</td>\n",
        "      <td> 24.40</td>\n",
        "      <td> 22.20</td>\n",
        "      <td> 23.30</td>\n",
        "      <td>  2053900</td>\n",
        "      <td> 23.30</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-14</th>\n",
        "      <td> 23.27</td>\n",
        "      <td> 23.35</td>\n",
        "      <td> 22.20</td>\n",
        "      <td> 22.32</td>\n",
        "      <td>   589600</td>\n",
        "      <td> 22.32</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-15</th>\n",
        "      <td> 22.45</td>\n",
        "      <td> 23.29</td>\n",
        "      <td> 21.36</td>\n",
        "      <td> 21.75</td>\n",
        "      <td>   875600</td>\n",
        "      <td> 21.75</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-16</th>\n",
        "      <td> 21.93</td>\n",
        "      <td> 22.17</td>\n",
        "      <td> 21.06</td>\n",
        "      <td> 21.74</td>\n",
        "      <td>   433600</td>\n",
        "      <td> 21.74</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-19</th>\n",
        "      <td> 22.20</td>\n",
        "      <td> 23.93</td>\n",
        "      <td> 21.70</td>\n",
        "      <td> 22.99</td>\n",
        "      <td>   858400</td>\n",
        "      <td> 22.99</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-20</th>\n",
        "      <td> 23.15</td>\n",
        "      <td> 23.47</td>\n",
        "      <td> 22.10</td>\n",
        "      <td> 22.90</td>\n",
        "      <td>   782200</td>\n",
        "      <td> 22.90</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-21</th>\n",
        "      <td> 23.00</td>\n",
        "      <td> 24.10</td>\n",
        "      <td> 22.68</td>\n",
        "      <td> 23.12</td>\n",
        "      <td>  1375000</td>\n",
        "      <td> 23.12</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-22</th>\n",
        "      <td> 23.32</td>\n",
        "      <td> 23.32</td>\n",
        "      <td> 22.44</td>\n",
        "      <td> 23.22</td>\n",
        "      <td>   370800</td>\n",
        "      <td> 23.22</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-23</th>\n",
        "      <td> 23.22</td>\n",
        "      <td> 23.25</td>\n",
        "      <td> 22.30</td>\n",
        "      <td> 23.18</td>\n",
        "      <td>   307000</td>\n",
        "      <td> 23.18</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-26</th>\n",
        "      <td> 23.26</td>\n",
        "      <td> 24.88</td>\n",
        "      <td> 23.01</td>\n",
        "      <td> 24.60</td>\n",
        "      <td>  1052000</td>\n",
        "      <td> 24.60</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-27</th>\n",
        "      <td> 24.80</td>\n",
        "      <td> 27.75</td>\n",
        "      <td> 24.25</td>\n",
        "      <td> 27.65</td>\n",
        "      <td>  3141300</td>\n",
        "      <td> 27.65</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-28</th>\n",
        "      <td> 27.52</td>\n",
        "      <td> 31.96</td>\n",
        "      <td> 27.10</td>\n",
        "      <td> 28.09</td>\n",
        "      <td>  5267300</td>\n",
        "      <td> 28.09</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-29</th>\n",
        "      <td> 27.99</td>\n",
        "      <td> 29.78</td>\n",
        "      <td> 27.58</td>\n",
        "      <td> 28.01</td>\n",
        "      <td>  1425200</td>\n",
        "      <td> 28.01</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-03-30</th>\n",
        "      <td> 28.58</td>\n",
        "      <td> 29.27</td>\n",
        "      <td> 25.82</td>\n",
        "      <td> 26.89</td>\n",
        "      <td>  1887200</td>\n",
        "      <td> 26.89</td>\n",
        "      <td> False</td>\n",
        "      <td> medium_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-04-02</th>\n",
        "      <td> 26.90</td>\n",
        "      <td> 27.80</td>\n",
        "      <td> 25.27</td>\n",
        "      <td> 27.12</td>\n",
        "      <td>  1166500</td>\n",
        "      <td> 27.12</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-04-03</th>\n",
        "      <td> 27.20</td>\n",
        "      <td> 28.40</td>\n",
        "      <td> 25.92</td>\n",
        "      <td> 26.70</td>\n",
        "      <td>  1384800</td>\n",
        "      <td> 26.70</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-04-04</th>\n",
        "      <td> 25.94</td>\n",
        "      <td> 27.00</td>\n",
        "      <td> 25.94</td>\n",
        "      <td> 26.16</td>\n",
        "      <td>   440700</td>\n",
        "      <td> 26.16</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-04-05</th>\n",
        "      <td> 25.96</td>\n",
        "      <td> 26.40</td>\n",
        "      <td> 24.02</td>\n",
        "      <td> 24.17</td>\n",
        "      <td>  1352200</td>\n",
        "      <td> 24.17</td>\n",
        "      <td> False</td>\n",
        "      <td> medium_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-04-09</th>\n",
        "      <td> 23.86</td>\n",
        "      <td> 25.58</td>\n",
        "      <td> 22.74</td>\n",
        "      <td> 25.22</td>\n",
        "      <td>  1397800</td>\n",
        "      <td> 25.22</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-04-10</th>\n",
        "      <td> 25.45</td>\n",
        "      <td> 26.51</td>\n",
        "      <td> 24.50</td>\n",
        "      <td> 25.81</td>\n",
        "      <td>  1027500</td>\n",
        "      <td> 25.81</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-04-11</th>\n",
        "      <td> 25.47</td>\n",
        "      <td> 26.25</td>\n",
        "      <td> 24.57</td>\n",
        "      <td> 25.43</td>\n",
        "      <td>  1004200</td>\n",
        "      <td> 25.43</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-04-12</th>\n",
        "      <td> 25.21</td>\n",
        "      <td> 26.44</td>\n",
        "      <td> 25.17</td>\n",
        "      <td> 26.20</td>\n",
        "      <td>   728000</td>\n",
        "      <td> 26.20</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-04-13</th>\n",
        "      <td> 26.00</td>\n",
        "      <td> 26.97</td>\n",
        "      <td> 25.44</td>\n",
        "      <td> 26.33</td>\n",
        "      <td>   508200</td>\n",
        "      <td> 26.33</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>...</th>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "      <td>...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-12-29</th>\n",
        "      <td> 52.77</td>\n",
        "      <td> 53.86</td>\n",
        "      <td> 52.52</td>\n",
        "      <td> 53.01</td>\n",
        "      <td>  1181500</td>\n",
        "      <td> 53.01</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-12-30</th>\n",
        "      <td> 53.09</td>\n",
        "      <td> 54.95</td>\n",
        "      <td> 52.85</td>\n",
        "      <td> 54.24</td>\n",
        "      <td>  2336800</td>\n",
        "      <td> 54.24</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2014-12-31</th>\n",
        "      <td> 54.71</td>\n",
        "      <td> 55.57</td>\n",
        "      <td> 54.16</td>\n",
        "      <td> 54.73</td>\n",
        "      <td>  1858000</td>\n",
        "      <td> 54.73</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-02</th>\n",
        "      <td> 55.46</td>\n",
        "      <td> 55.60</td>\n",
        "      <td> 54.24</td>\n",
        "      <td> 55.15</td>\n",
        "      <td>  1664500</td>\n",
        "      <td> 55.15</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-05</th>\n",
        "      <td> 54.54</td>\n",
        "      <td> 54.95</td>\n",
        "      <td> 52.33</td>\n",
        "      <td> 52.53</td>\n",
        "      <td>  2023000</td>\n",
        "      <td> 52.53</td>\n",
        "      <td> False</td>\n",
        "      <td> medium_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-06</th>\n",
        "      <td> 52.55</td>\n",
        "      <td> 53.93</td>\n",
        "      <td> 50.75</td>\n",
        "      <td> 52.44</td>\n",
        "      <td>  3751200</td>\n",
        "      <td> 52.44</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-07</th>\n",
        "      <td> 53.32</td>\n",
        "      <td> 53.75</td>\n",
        "      <td> 51.76</td>\n",
        "      <td> 52.21</td>\n",
        "      <td>  1548200</td>\n",
        "      <td> 52.21</td>\n",
        "      <td> False</td>\n",
        "      <td> medium_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-08</th>\n",
        "      <td> 52.59</td>\n",
        "      <td> 54.14</td>\n",
        "      <td> 51.76</td>\n",
        "      <td> 53.83</td>\n",
        "      <td>  2015300</td>\n",
        "      <td> 53.83</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-09</th>\n",
        "      <td> 55.96</td>\n",
        "      <td> 56.99</td>\n",
        "      <td> 54.72</td>\n",
        "      <td> 56.07</td>\n",
        "      <td>  6222600</td>\n",
        "      <td> 56.07</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-12</th>\n",
        "      <td> 56.00</td>\n",
        "      <td> 56.06</td>\n",
        "      <td> 53.43</td>\n",
        "      <td> 54.02</td>\n",
        "      <td>  2405100</td>\n",
        "      <td> 54.02</td>\n",
        "      <td> False</td>\n",
        "      <td> medium_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-13</th>\n",
        "      <td> 54.47</td>\n",
        "      <td> 54.80</td>\n",
        "      <td> 52.52</td>\n",
        "      <td> 53.18</td>\n",
        "      <td>  1952100</td>\n",
        "      <td> 53.18</td>\n",
        "      <td> False</td>\n",
        "      <td> medium_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-14</th>\n",
        "      <td> 52.80</td>\n",
        "      <td> 53.68</td>\n",
        "      <td> 51.46</td>\n",
        "      <td> 52.20</td>\n",
        "      <td>  1846100</td>\n",
        "      <td> 52.20</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-15</th>\n",
        "      <td> 53.00</td>\n",
        "      <td> 53.61</td>\n",
        "      <td> 50.03</td>\n",
        "      <td> 50.12</td>\n",
        "      <td>  2640400</td>\n",
        "      <td> 50.12</td>\n",
        "      <td> False</td>\n",
        "      <td> medium_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-16</th>\n",
        "      <td> 50.18</td>\n",
        "      <td> 51.49</td>\n",
        "      <td> 50.03</td>\n",
        "      <td> 51.39</td>\n",
        "      <td>  2182300</td>\n",
        "      <td> 51.39</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-20</th>\n",
        "      <td> 51.65</td>\n",
        "      <td> 51.78</td>\n",
        "      <td> 50.69</td>\n",
        "      <td> 51.41</td>\n",
        "      <td>  1227600</td>\n",
        "      <td> 51.41</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-21</th>\n",
        "      <td> 51.20</td>\n",
        "      <td> 53.50</td>\n",
        "      <td> 51.20</td>\n",
        "      <td> 53.41</td>\n",
        "      <td>  3228700</td>\n",
        "      <td> 53.41</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-22</th>\n",
        "      <td> 53.87</td>\n",
        "      <td> 55.28</td>\n",
        "      <td> 53.12</td>\n",
        "      <td> 54.80</td>\n",
        "      <td>  2295400</td>\n",
        "      <td> 54.80</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-23</th>\n",
        "      <td> 54.66</td>\n",
        "      <td> 55.64</td>\n",
        "      <td> 54.30</td>\n",
        "      <td> 55.19</td>\n",
        "      <td>  1629000</td>\n",
        "      <td> 55.19</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-26</th>\n",
        "      <td> 55.12</td>\n",
        "      <td> 55.79</td>\n",
        "      <td> 54.83</td>\n",
        "      <td> 55.41</td>\n",
        "      <td>  1450300</td>\n",
        "      <td> 55.41</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-27</th>\n",
        "      <td> 56.06</td>\n",
        "      <td> 56.16</td>\n",
        "      <td> 54.57</td>\n",
        "      <td> 55.63</td>\n",
        "      <td>  2403700</td>\n",
        "      <td> 55.63</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-28</th>\n",
        "      <td> 56.15</td>\n",
        "      <td> 56.15</td>\n",
        "      <td> 52.92</td>\n",
        "      <td> 53.00</td>\n",
        "      <td>  2002700</td>\n",
        "      <td> 53.00</td>\n",
        "      <td> False</td>\n",
        "      <td> medium_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-29</th>\n",
        "      <td> 52.85</td>\n",
        "      <td> 53.31</td>\n",
        "      <td> 51.41</td>\n",
        "      <td> 52.93</td>\n",
        "      <td>  1838000</td>\n",
        "      <td> 52.93</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-01-30</th>\n",
        "      <td> 52.59</td>\n",
        "      <td> 53.42</td>\n",
        "      <td> 52.05</td>\n",
        "      <td> 52.47</td>\n",
        "      <td>  1873900</td>\n",
        "      <td> 52.47</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-02-02</th>\n",
        "      <td> 52.94</td>\n",
        "      <td> 53.50</td>\n",
        "      <td> 51.21</td>\n",
        "      <td> 53.47</td>\n",
        "      <td>  2105500</td>\n",
        "      <td> 53.47</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-02-03</th>\n",
        "      <td> 53.83</td>\n",
        "      <td> 55.93</td>\n",
        "      <td> 53.41</td>\n",
        "      <td> 55.78</td>\n",
        "      <td>  2876400</td>\n",
        "      <td> 55.78</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-02-04</th>\n",
        "      <td> 55.53</td>\n",
        "      <td> 57.07</td>\n",
        "      <td> 55.25</td>\n",
        "      <td> 56.74</td>\n",
        "      <td>  2494400</td>\n",
        "      <td> 56.74</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-02-05</th>\n",
        "      <td> 57.60</td>\n",
        "      <td> 57.70</td>\n",
        "      <td> 56.08</td>\n",
        "      <td> 57.47</td>\n",
        "      <td>  4195400</td>\n",
        "      <td> 57.47</td>\n",
        "      <td> False</td>\n",
        "      <td>  small_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-02-06</th>\n",
        "      <td> 47.70</td>\n",
        "      <td> 48.17</td>\n",
        "      <td> 44.86</td>\n",
        "      <td> 45.11</td>\n",
        "      <td> 25137400</td>\n",
        "      <td> 45.11</td>\n",
        "      <td> False</td>\n",
        "      <td> medium_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-02-09</th>\n",
        "      <td> 44.91</td>\n",
        "      <td> 45.04</td>\n",
        "      <td> 42.10</td>\n",
        "      <td> 42.17</td>\n",
        "      <td> 13044700</td>\n",
        "      <td> 42.17</td>\n",
        "      <td> False</td>\n",
        "      <td> medium_gain</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2015-02-10</th>\n",
        "      <td> 43.83</td>\n",
        "      <td> 45.55</td>\n",
        "      <td> 43.31</td>\n",
        "      <td> 44.66</td>\n",
        "      <td> 11247800</td>\n",
        "      <td> 44.66</td>\n",
        "      <td>  True</td>\n",
        "      <td>    negative</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>740 rows \u00d7 8 columns</p>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 38,
       "text": [
        "             open   high    low  close    volume  adj_close profit  \\\n",
        "date                                                                 \n",
        "2012-03-02  22.01  26.00  22.00  24.58   4809400      24.58   True   \n",
        "2012-03-05  24.85  24.86  20.90  20.99   2988200      20.99  False   \n",
        "2012-03-06  19.83  20.50  19.36  20.50   1154300      20.50   True   \n",
        "2012-03-07  20.45  20.63  19.95  20.25    444800      20.25  False   \n",
        "2012-03-08  20.30  20.39  19.96  20.00    436900      20.00  False   \n",
        "2012-03-09  20.00  20.10  19.50  19.80    668200      19.80  False   \n",
        "2012-03-12  19.80  22.49  19.52  22.49   1358200      22.49   True   \n",
        "2012-03-13  22.55  24.40  22.20  23.30   2053900      23.30   True   \n",
        "2012-03-14  23.27  23.35  22.20  22.32    589600      22.32  False   \n",
        "2012-03-15  22.45  23.29  21.36  21.75    875600      21.75  False   \n",
        "2012-03-16  21.93  22.17  21.06  21.74    433600      21.74  False   \n",
        "2012-03-19  22.20  23.93  21.70  22.99    858400      22.99   True   \n",
        "2012-03-20  23.15  23.47  22.10  22.90    782200      22.90  False   \n",
        "2012-03-21  23.00  24.10  22.68  23.12   1375000      23.12   True   \n",
        "2012-03-22  23.32  23.32  22.44  23.22    370800      23.22  False   \n",
        "2012-03-23  23.22  23.25  22.30  23.18    307000      23.18  False   \n",
        "2012-03-26  23.26  24.88  23.01  24.60   1052000      24.60   True   \n",
        "2012-03-27  24.80  27.75  24.25  27.65   3141300      27.65   True   \n",
        "2012-03-28  27.52  31.96  27.10  28.09   5267300      28.09   True   \n",
        "2012-03-29  27.99  29.78  27.58  28.01   1425200      28.01   True   \n",
        "2012-03-30  28.58  29.27  25.82  26.89   1887200      26.89  False   \n",
        "2012-04-02  26.90  27.80  25.27  27.12   1166500      27.12   True   \n",
        "2012-04-03  27.20  28.40  25.92  26.70   1384800      26.70  False   \n",
        "2012-04-04  25.94  27.00  25.94  26.16    440700      26.16   True   \n",
        "2012-04-05  25.96  26.40  24.02  24.17   1352200      24.17  False   \n",
        "2012-04-09  23.86  25.58  22.74  25.22   1397800      25.22   True   \n",
        "2012-04-10  25.45  26.51  24.50  25.81   1027500      25.81   True   \n",
        "2012-04-11  25.47  26.25  24.57  25.43   1004200      25.43  False   \n",
        "2012-04-12  25.21  26.44  25.17  26.20    728000      26.20   True   \n",
        "2012-04-13  26.00  26.97  25.44  26.33    508200      26.33   True   \n",
        "...           ...    ...    ...    ...       ...        ...    ...   \n",
        "2014-12-29  52.77  53.86  52.52  53.01   1181500      53.01   True   \n",
        "2014-12-30  53.09  54.95  52.85  54.24   2336800      54.24   True   \n",
        "2014-12-31  54.71  55.57  54.16  54.73   1858000      54.73   True   \n",
        "2015-01-02  55.46  55.60  54.24  55.15   1664500      55.15  False   \n",
        "2015-01-05  54.54  54.95  52.33  52.53   2023000      52.53  False   \n",
        "2015-01-06  52.55  53.93  50.75  52.44   3751200      52.44  False   \n",
        "2015-01-07  53.32  53.75  51.76  52.21   1548200      52.21  False   \n",
        "2015-01-08  52.59  54.14  51.76  53.83   2015300      53.83   True   \n",
        "2015-01-09  55.96  56.99  54.72  56.07   6222600      56.07   True   \n",
        "2015-01-12  56.00  56.06  53.43  54.02   2405100      54.02  False   \n",
        "2015-01-13  54.47  54.80  52.52  53.18   1952100      53.18  False   \n",
        "2015-01-14  52.80  53.68  51.46  52.20   1846100      52.20  False   \n",
        "2015-01-15  53.00  53.61  50.03  50.12   2640400      50.12  False   \n",
        "2015-01-16  50.18  51.49  50.03  51.39   2182300      51.39   True   \n",
        "2015-01-20  51.65  51.78  50.69  51.41   1227600      51.41  False   \n",
        "2015-01-21  51.20  53.50  51.20  53.41   3228700      53.41   True   \n",
        "2015-01-22  53.87  55.28  53.12  54.80   2295400      54.80   True   \n",
        "2015-01-23  54.66  55.64  54.30  55.19   1629000      55.19   True   \n",
        "2015-01-26  55.12  55.79  54.83  55.41   1450300      55.41   True   \n",
        "2015-01-27  56.06  56.16  54.57  55.63   2403700      55.63  False   \n",
        "2015-01-28  56.15  56.15  52.92  53.00   2002700      53.00  False   \n",
        "2015-01-29  52.85  53.31  51.41  52.93   1838000      52.93   True   \n",
        "2015-01-30  52.59  53.42  52.05  52.47   1873900      52.47  False   \n",
        "2015-02-02  52.94  53.50  51.21  53.47   2105500      53.47   True   \n",
        "2015-02-03  53.83  55.93  53.41  55.78   2876400      55.78   True   \n",
        "2015-02-04  55.53  57.07  55.25  56.74   2494400      56.74   True   \n",
        "2015-02-05  57.60  57.70  56.08  57.47   4195400      57.47  False   \n",
        "2015-02-06  47.70  48.17  44.86  45.11  25137400      45.11  False   \n",
        "2015-02-09  44.91  45.04  42.10  42.17  13044700      42.17  False   \n",
        "2015-02-10  43.83  45.55  43.31  44.66  11247800      44.66   True   \n",
        "\n",
        "                   gain  \n",
        "date                     \n",
        "2012-03-02     negative  \n",
        "2012-03-05  medium_gain  \n",
        "2012-03-06     negative  \n",
        "2012-03-07   small_gain  \n",
        "2012-03-08   small_gain  \n",
        "2012-03-09   small_gain  \n",
        "2012-03-12     negative  \n",
        "2012-03-13     negative  \n",
        "2012-03-14   small_gain  \n",
        "2012-03-15   small_gain  \n",
        "2012-03-16   small_gain  \n",
        "2012-03-19     negative  \n",
        "2012-03-20   small_gain  \n",
        "2012-03-21     negative  \n",
        "2012-03-22   small_gain  \n",
        "2012-03-23   small_gain  \n",
        "2012-03-26     negative  \n",
        "2012-03-27     negative  \n",
        "2012-03-28     negative  \n",
        "2012-03-29     negative  \n",
        "2012-03-30  medium_gain  \n",
        "2012-04-02     negative  \n",
        "2012-04-03   small_gain  \n",
        "2012-04-04     negative  \n",
        "2012-04-05  medium_gain  \n",
        "2012-04-09     negative  \n",
        "2012-04-10     negative  \n",
        "2012-04-11   small_gain  \n",
        "2012-04-12     negative  \n",
        "2012-04-13     negative  \n",
        "...                 ...  \n",
        "2014-12-29     negative  \n",
        "2014-12-30     negative  \n",
        "2014-12-31     negative  \n",
        "2015-01-02   small_gain  \n",
        "2015-01-05  medium_gain  \n",
        "2015-01-06   small_gain  \n",
        "2015-01-07  medium_gain  \n",
        "2015-01-08     negative  \n",
        "2015-01-09     negative  \n",
        "2015-01-12  medium_gain  \n",
        "2015-01-13  medium_gain  \n",
        "2015-01-14   small_gain  \n",
        "2015-01-15  medium_gain  \n",
        "2015-01-16     negative  \n",
        "2015-01-20   small_gain  \n",
        "2015-01-21     negative  \n",
        "2015-01-22     negative  \n",
        "2015-01-23     negative  \n",
        "2015-01-26     negative  \n",
        "2015-01-27   small_gain  \n",
        "2015-01-28  medium_gain  \n",
        "2015-01-29     negative  \n",
        "2015-01-30   small_gain  \n",
        "2015-02-02     negative  \n",
        "2015-02-03     negative  \n",
        "2015-02-04     negative  \n",
        "2015-02-05   small_gain  \n",
        "2015-02-06  medium_gain  \n",
        "2015-02-09  medium_gain  \n",
        "2015-02-10     negative  \n",
        "\n",
        "[740 rows x 8 columns]"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Grouping"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Besides **apply()**, another great DataFrame function is **groupby()**. It will group a DataFrame by one or more columns, and let you iterate through each group.\n",
      "\n",
      "Here we will show the average gain among the three categories of negative, small, medium and large gains we defined above and stored in column ``gain\""
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "gains = {}\n",
      "for gain, gain_data in df.groupby(\"gain\"):\n",
      "    gains[gain] = gain_data.close.mean()\n",
      "gains"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "{'large_gain': 68.647999999999996,\n",
        " 'medium_gain': 56.715138888888895,\n",
        " 'negative': 46.670194986072417,\n",
        " 'small_gain': 39.890948275862065}"
       ]
      }
     ],
     "prompt_number": 39
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Comparing multiple stocks"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "As a last task, we will use the experience we obtained so far -- and learn some new things -- in order to compare the performance of different stocks we obtained from Yahoo finance."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stocks = ['ORCL', 'TSLA', 'IBM','YELP', 'MSFT']\n",
      "attr = 'Close'\n",
      "df = pd.io.data.get_data_yahoo(stocks, \n",
      "                               start=datetime(2014, 1, 1), \n",
      "                               end=datetime(2014, 12, 31))[attr]\n",
      "print df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "               IBM   MSFT   ORCL    TSLA   YELP\n",
        "Date                                           \n",
        "2014-01-02  185.53  37.16  37.84  150.10  67.92\n",
        "2014-01-03  186.64  36.91  37.62  149.56  67.66\n",
        "2014-01-06  186.00  36.13  37.47  147.00  71.72\n",
        "2014-01-07  189.71  36.41  37.85  149.36  72.66\n",
        "2014-01-08  187.97  35.76  37.72  151.28  78.42\n"
       ]
      }
     ],
     "prompt_number": 40
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df.ORCL.plot(label = 'oracle')\n",
      "df.TSLA.plot(label = 'tesla')\n",
      "df.IBM.plot(label = 'ibm')\n",
      "df.MSFT.plot(label = 'msft')\n",
      "df.YELP.plot(label = 'yelp')\n",
      "plt.legend(loc=5)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 43,
       "text": [
        "<matplotlib.legend.Legend at 0x10af612d0>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nzXThHQAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10ab694d0>"
       ]
      }
     ],
     "prompt_number": 43
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Calculating returns over a period of length T"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "$$r(t) = \\frac{f(t)-f(t-T)}{f(t)} $$\n",
      "\n",
      "The returns can be computed in python with a simple function **pct_returns( ) **"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rets = df.pct_change(30)\n",
      "#print rets.head(20)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 46
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Plotting again the timeseries of the returns of the different stocks"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rets.ORCL.plot(label = 'oracle')\n",
      "rets.TSLA.plot(label = 'tesla')\n",
      "rets.IBM.plot(label = 'ibm')\n",
      "rets.MSFT.plot(label = 'msft')\n",
      "rets.YELP.plot(label = 'yelp')\n",
      "plt.legend()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 49,
       "text": [
        "<matplotlib.legend.Legend at 0x10b2d6450>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10b190e10>"
       ]
      }
     ],
     "prompt_number": 49
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.scatter(rets.TSLA, rets.ORCL)\n",
      "plt.xlabel('Returns TESLA')\n",
      "plt.ylabel('Returns ORCL')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 50,
       "text": [
        "<matplotlib.text.Text at 0x10b07b250>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nzdlyReAAAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10b07b150>"
       ]
      }
     ],
     "prompt_number": 50
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Correlations of columns"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "The correlation coefficient between variables $X$ and $Y$ is defined as follows:\n",
      "$$\\text{Corr}(X,Y) = \\frac{E\\left[(X-\\mu_X)(Y-\\mu_Y)\\right]}{\\sigma_X\\sigma_Y}$$\n",
      "\n",
      "In python we can compute the correlation coefficient of all pairs of columns with **corr( )**"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "corr = rets.corr()\n",
      "print corr"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "           IBM      MSFT      ORCL      TSLA      YELP\n",
        "IBM   1.000000  0.340422  0.025742  0.196504  0.104776\n",
        "MSFT  0.340422  1.000000  0.114090  0.415763  0.262595\n",
        "ORCL  0.025742  0.114090  1.000000  0.000964 -0.084176\n",
        "TSLA  0.196504  0.415763  0.000964  1.000000  0.768504\n",
        "YELP  0.104776  0.262595 -0.084176  0.768504  1.000000\n"
       ]
      }
     ],
     "prompt_number": 51
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Visualizing the correlation coefficient of all columns"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We will learn more about visualization later, but for now this is a simple example"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sns.heatmap(corr, annot=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 52,
       "text": [
        "<matplotlib.axes._subplots.AxesSubplot at 0x10b328d10>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10b56ed50>"
       ]
      }
     ],
     "prompt_number": 52
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Returns vs risk (standard deviation)\n"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "In many applications, we want to know both the returns as well as the standard deviation of the returns of a stock (i.e., its risk).  Below we visualize the result of such an analysis"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.scatter(rets.mean(), rets.std())\n",
      "plt.xlabel('Expected returns')\n",
      "plt.ylabel('Standard Deviation (Risk)')\n",
      "for label, x, y in zip(rets.columns, rets.mean(), rets.std()):\n",
      "    plt.annotate(\n",
      "        label, \n",
      "        xy = (x, y), xytext = (20, -20),\n",
      "        textcoords = 'offset points', ha = 'right', va = 'bottom',\n",
      "        bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),\n",
      "        arrowprops = dict(arrowstyle = '->', connectionstyle = 'arc3,rad=0'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "iVBORw0KGgoAAAANSUhEUgAAAY8AAAERCAYAAACD9ivUAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xl81NW9//HXJGSBEBLUIDsBhA8oIAp1AX+4tFqtoqLF\npS6FShfbeqv33lrtprZX2tra2ntbq9aFtlcvVi0qal1abGlxRa0owodFAQGBgBAgEMhM5vfHdwJD\nSCYzSSaZTN7Px4MHM9/vnO/3c4jOJ+ec7zknFI1GERERSUVOewcgIiIdj5KHiIikTMlDRERSpuQh\nIiIpU/IQEZGUKXmIiEjKuqTrwmaWA9wJjAH2ADPcfWXc+UuBbwBh4B3gq+4eNbM3gcrYx95396vS\nFaOIiDRP2pIHcD6Q7+4TzOx44PbYMcysK/BDYJS7V5vZQ8A5ZvYCgLufmsa4RESkhdLZbTUReBbA\n3V8FxsedqwZOdPfq2PsuwG7gaKCbmT1nZn+NJR0REckw6UwePYDtce8jsa4s3D3q7hUAZnYNUOTu\nfwGqgJ+6+6eBrwAP1pUREZHMkc5uq+1Acdz7HHevrXsTSwq3AUcAF8YOLwNWALj7cjPbAvQB1qUx\nThERSVE6k8cCYDLwiJmdACyqd/5ugu6rKe5et8DWdIIB9q+ZWV+C1stHiW4SjUajoVCoVQMXEekE\nWvTFGUrXwohmFmL/01YQJIZxQHdgYezP/LgidwBPAw8Ag2LHrnf3V5q4VbSiYkdrhZ1xysqKUf06\npmyuG6h+HV1ZWXGLkkfaWh6x1sTV9Q4vi3ud20jRK9ITkYiItBYNRouISMqUPEREJGVKHiIikjIl\nDxERSZmSh4iIpEzJQ0REUqbkISIiKVPyEBGRlCl5iIhIypQ8REQkZUoeIiKSMiUPERFJmZKHiIik\nTMlDRERSpuQhIiIpU/IQEZGUKXmIiEjKlDxERCRlSh4iIpIyJQ8REUmZkoeIiKRMyUNERFKm5CEi\nIilT8hARkZQpeYiISMqUPEREJGVKHiIikjIlDxERSZmSh4iIpEzJQ0REUqbkISIiKVPyEBGRlCl5\niIhIypQ8REQkZUoeIiKSMiUPERFJWZf2DqAjqq6uZvbs+QBccskkCgsL2zkiEZG2lbbkYWY5wJ3A\nGGAPMMPdV8advxT4BhAG3gG+CoQSlckE1dXVXHzxHF5+eToAc+Y8wMMPT1ECEZFOJZ3dVucD+e4+\nAbgBuL3uhJl1BX4InOLuJwElwDmxMgUNlckUs2fPjyWOPCCPl1+etq8VIiLSWaQzeUwEngVw91eB\n8XHnqoET3b069r5L7NhE4M+NlBERkQyRzuTRA9ge9z4S68rC3aPuXgFgZtcARe7+QqIymeKSSyZx\n4okPAHuBvZx44iwuuWRSe4clItKm0jlgvh0ojnuf4+61dW9iSeE24AjgwmTKNKasrLipj7SiYubN\nu5JZs16gtraWF198ge7dp9KzZ/piaNv6tb1srl821w1Uv84sncljATAZeMTMTgAW1Tt/N0FX1RR3\njyZZpkEVFTtaJ+IUXHjhJGpqanj//Zd45JEnMBvBkUce1er3KSsrbpf6tZVsrl821w1Uv46upYkx\nncljDnC6mS2IvZ8ee8KqO7AQ+AIwH5hnZgB3NFQmjfG1WCQS4ZhjjiUSibBnTzXz5v2F0077VHuH\nJSKSdmlLHrHWxNX1Di+Le53bSNH6ZdpdNBqltvbg3rOamhry8vKoqanBbCS5ublEIpFm3ycnJ4dQ\nKNSSUEVE2oQmCTYiHA6zatXfyM19ny5dKsjNDTf4mdLSLQwdeihvvvkIQ4YMbdE9I5Ecamu7Ew6X\nc+ihEykt7dWi64mIpEtSycPMSoChQC3wgbtXpjWqdhYOh1m+/A+MHbuO3NwcgrmLeQ18Mg/oD0Bu\nbg5DhuSSk9PSh8N2A0tYvnwFkcjnKCsb0cLriYi0voTfdGZ2lpn9DVgO3EswyL3EzOaZ2VltEF+7\nWL365bjEkZxBg8pZteqDVoth2LAatm17rtWuJyLSmhpteZjZLGAj8DV3X1zv3CjgKjO7zN0vT2+I\nbS8UWpFS4gDIz88nHA4TjUZbbdyiR4917NpV1SrXEhFpTYm6rb7r7msbOuHu7wLXmdmA9ITVvrp0\n+bhZ5epaH4MHD2mVOHr1qmXz5g/p2rVfq1xPRKS1NJo86hKHmU1297l1x82sL/Ard7/A3T9sgxjb\nXCh08OA4wPXXv8rIkaVMn24AVFXVcPnlLzJkSA/Wrq2ipCSPXbt20bXrWs45ZyDnnVfO6ac/zQsv\nnH3Ade666z2ee24tZWWFQIiamghf//pRjBtXdsDn8vNz2bZtF127pqWaIiLNlsyA+UwzyyOYg3E1\ncBPw67RGlaG+/e2xXHbZi5x8ch+GDOnBHXe8y4UXDmb58kquvXYUJ554OLt372bTpo0MGlQOQEM9\nWKFQiMsvH8aFFw4G4IMPdvCd77zOQw+d1sBdow0cExFpX8l07H8SuBF4g2DV24nu/oO0RpWhSksL\n+Na3juaHP3yThQsrWL++issvHwZANPYd37VrV8Lhhlsu8aLR/UmhsnIvRUV6alpEOo5EA+Yns//X\n3v8C7gJ+B/Q1s77u3inXIZ80qQ8vvrieW255g/vvP3nf8V/+8l1mzfJ977/1rV4MHdqjwWtEo1Ee\nfHAFzz+/lpycED165PO97x2b9thFRFpLol93b+HAPhMnaHmcH3t/arqCynTnnDOQ6uoIZWX7ByPq\nuq2SUb/bSkSko0k0YH5KQ8fNrCTbJwk2JdrAMERDxxJfQ2MZIq1J20O3rSY72s1sMnASQdfVa0Av\nM7vJ3X+V7uAyVSh08EB4/W6rcePK+PKXR7Jt214uv3zevuNXXDEsdg2tYSXSWrQ9dNtLZpT2JuBy\n4GKC5PE14O9Ap00e48aVHfBY7S23NL7h4WuvTWmLkEQ6tQO3hya2PfRcpk07o30Dy2JJTaN296XA\n2cBcd99Jwws9iYhIJ5FM8thoZr8CPgE8a2a3A2vSG1Z7a2y1+LYVDteSm5vf3mGIZDxtD932kkke\nlxJ0V50Sa3Usjx3LWpFIZmw9uW1bLaWlfdo7DJGMV1hYyMMPT+G22+Zy5pnT+Y//6KPxjjRrNHnE\nBsoBphCsST7BzD5PsGZ4Vnfkh8PlGfE01ObNvejZ87D2DkOkQygsLGTatDO46KLPsGLFcubOfaLB\nTdykdSRqedSNAp8KnBL3d93rrNW79wksWdK+C0pt2lRLXt6Edo1BpCPKy8ujd+8+TJx4Eo88MpuP\nP97S3iFlpUTzPG6K/T2t/jkzm5jGmNpd9+4l1NZOY9Gip+jefTW9e9eSn5/b4DpVrSkcrmXr1ihb\ntpSRlzeB/v3HpveGIlnq1FM/yfz5f+Oiiy6lurq6vcPJSomWJ5kA/BzYAnzB3Tea2WDgNoInr7q1\nTYjto0ePQ+jR40qqq6tZu3YNNTW70n7P3Nw8evTozeDBh6b9XiId0e7dVaxb9xK5uavIzd1OKBQ5\n6DPdun3A5s3vkJu7lNWr/0VubvMegPn44wKqqvYSjeZRU9OHgoKj6N9/VEurkDUSzfO4C7gPGAh8\n38zeAn4JPAkc2QaxZYTCwkL69x/e3mGIdHq7du1k3br7GTNmR8JJtsE2Q2GGDBnEmjXLGTr0iGbd\nr6gol6qqGqAGWEllpbNixQaOOOJTzbpetkmUPLq4+y/NLAdYRTDW8Sl3f7ktAhMRibdu3dNNJo54\neXl5RCIRamtryclJbWfQhpSUdKFv3wVs2mT06pWV++ClJNG/6B4Ad68FaoHTlDhEpD1EIhEKC1el\nvKxPeflgVq16v9XiOOywPLZvf7vVrteRJZuOt7r7xrRGIiLSiK1bt3DYYTtTLpefn084HGnVR3bz\n8ipa7VodWaJuq95m9n2COR7xrwGinXVDKBFpe+HwbvLzD/5d9xe/eIclS7ayefMeqqvD9O9fRM+e\nBZx0Um+eemoN0Sjs3RvmvPN2M2XKWO666z0OO6yQz352yEHXevfdj7nqqvk88MDJHHlkz0TRtGLN\nOq5EyeNu9ieL+NfUey0i0i6uu240AHPnrmbVqh1cc80odu6s4bLL5vHYY6fTpUsOFRW7ufTSFzjv\nvDEJu73mzFnFFVcM4+GHVyZc7FQCiZLHT9x9d6LCZlbo7nqIWkQyRl5eDjU1tTzyyPucdFJvBgzo\nzhNPnM6aNasbLbNrV5jXX6/g0Uc/xUUX/ZVt2/ZQVFTQhlF3PInGPP7XzL5oZgct9GRmxWb2NWB2\n+kITEUldQUEud9/9/1izZifXXPMSZ5/9LH/+80cMGlTeaJnnnvuQ007rS35+Lmec0Y/HH2880Ugg\nUcvjIuBq4HUzqwTWEnT2DQIOI5jz8dm0RygikoKKit3s2RPhW98KVmhYs2YnX//6AsaObXzy7Zw5\nq+jSJYevf30B1dURNm3azVe/qgmBiSRaniQC/MrMfg0cDQwDIsBKYJG7t//KgSIi9WzeXM0PfvAm\n9913Mt26daF3766UluaTl9dwR8vy5ZVEo3D//SfvO/bVr/6TF19cz/HHa2HSxjS5k2AsSfwr9kdE\nJKONHNmTiy8eyowZf6egIJdIJMqUKeUMGhT0wD/wwDIef3wVAN265TFsWA/OPnvgAdeYMqWcBx9c\npuSRQCgTlh5voWhFxY72jiFtysqKUf06pmyuG7Rt/TZsWE1Z2f0UF7fdIHZRUQFVVXsOOr5kSRmD\nBn2xzeJIl7Ky4hY9NdvyOfsiItLpNNltBWBmRwGHEDe/w93npysoEZF4oVAXIpFM6SXR79yQRPKI\nDZhPBt4H4n96Wb0hlIhkju7dS9m+PYfS0vaOBGpri9o7hIyQTMvjDMCamjAoIpIuRUVFbNrUD2jf\ndaVqaiLA0HaNIVMkkzzepxnttNhS7ncCYwhW6J3h7ivrfaYb8ALBZlMeO/YmUFl3b3e/KtV7i0j2\nyc8/jk2b5tKrV/t0G0WjURYvLmHwYO3wCcklj63Ae2b2ElC3FEnU3b/QRLnzgXx3n2BmxwO3x44B\nYGbjCTac6kusO8zMCgHcXV1iInKAfv2O5sMPw2zePJ9+/bZTUpLXJvetrY3y4YcRtm4dQP/+U8nL\na5v7ZrpkksezsT914x0hDhz7aMzEWDnc/dVYsoiXT5BM/hB37Gigm5k9F4vt2+7+ahL3EpFOYMCA\ncUSjx7Jx42rWrPmIYN5yevTs2Y2tW3cRChXQu/eRlJVprCNeMpMEZ5nZaIKdBLsAL7p7MhMGewDb\n495HzCwntrkU7v4SgJnFl6kCfuru95nZMODPZja8royISCgUonfvcqA8rffJ9nk6LdVk56GZXQE8\nDgwmWNdqjpklMw6xHYhfVDEniSSwDHgQwN2XA1uAPkncS0RE2lAy3Vb/CRzn7lsAzOy/gL8D9zVR\nbgHBI76PmNkJwKIk7jWdYID9a2bWl6D18lFThcrKDlr4N6uofh1XNtcNVL/OLJnkkVOXOADcfbOZ\nJdPROAc43cwWxN5PN7NLge7u/ttGytwHPGBmdRMQpyfTZZXNTctsbzpnc/2yuW6g+nV0LU2MySSP\nRWZ2B8EXewi4CmhyB/jYgopX1zu8rIHPnRr3OgxckURMIiLSjpJ5YPqLwF7gfuCB2OuvpjMoERHJ\nbMk8bbULuL4NYhERkQ6i0eRhZm+5+zFm1tCYQ9Tdc9MYl4iIZLBEOwkeE/v7oK4tM9PO8CIinVgy\n8zxervc+F1iYtohERCTjJeq2ehE4OfY6vusqAjyR5rhERCSDJeq2OhXAzP7b3f+t7UISEZFMl8w8\nj+vNbArQnWCeRy4w2N2/n9bIREQkYyWTPP4EdAWGAfOBSajbSkSkU0tmkqABpxEsN/JT4DhgYDqD\nEhGRzJZM8tgYW2pkKTDG3dcDvdMbloiIZLJkuq0Wm9n/EOz697+x1W41z0NEpBNLpuXxFeCP7r4Y\nuImg1fG5tEYlIiIZrdHkYWbHxl6eBITMbBJQSTCAfkgbxCYiIhkqUbfV1QQr6t5Cw3uWn9rAMRER\n6QQSTRL8Yuzlde7+VhvFIyIiHUAyA+a/jS2E+CDwoLt/mOaYREQkwzU5YO7u44ELgHzgGTP7m5nN\nSHtkIiKSsZJ52gp3Xw78HPgx0AO4IZ1BiYhIZmuy28rMLgQuAU4AngK+7u4vpTswERHJXMmMeVwG\n/B74nLvXpDkeERHpAJIZ87gA2AxcZWaFsfkeIiLSiSWzk+C1wA+BfweKgXvM7JvpDkxERDJXMgPm\n04AzgSp3rwDGA19IZ1AiIpLZkkkeEXffE/e+GginKR4REekAkkkefzez24HuZnY+8CQwL71hiYhI\nJksmeXwTWA68DVwJPAP8RzqDEhGRzJbMo7pFwBvAP4GV7r47vSGJiEimazR5mFkR8BuCCYJbCVbW\nLTGzB4Br3X1v24QoIiKZJlG31R2xvwe4++Hu3hsYDHQHbkt7ZCIikrESJY9JwBfcfWPdAXffQLDH\nxyfTHZiIiGSuRMljt7sf9Ehu7LFdPaorItKJJUoeDe0eKCIikvBpq2Fm9mIj545IRzAiItIxJEoe\n5yQ4p1aJiEgnlmgP87+1YRwiItKBJLWToIiISLxkZpg3i5nlAHcCY4A9wAx3X1nvM92AFwgeCfZk\nyoiISPtLNMN8YKKC7r6miWufD+S7+wQzOx64PXas7vrjgbuAvuwfQ0lYRkREMkOibqtngKeBvwPv\nE6ym+yeCRRLnJnHticCzAO7+KsE+IPHyCRKDp1BGREQyQKPJw91Hufto4E1ggruPdffxBF/oq5K4\ndg9ge9z7SKxbqu76L7n72lTKiIhIZkhmzGO4u79W98bd3zGzZOZ5bCfYtrZOjrvXpqEMZWXFTX2k\nQ1P9Oq5srhuofp1ZMsljtZndCvwfQUtlGvBeEuUWAJOBR8zsBGBRmspQUbEjmY91SGVlxapfB5XN\ndQPVr6NraWJMJnlcDvyQIHlECZ6Omp5EuTnA6Wa2IPZ+upldCnR3998mWyaJ+4iISBtLJnn8wt1T\n/hJ39yhwdb3Dyxr43KlNlBERkQyTzGD0aDNTx5+IiOyTTMujFlhjZg7UbUEbdffT0heWiIhksmSS\nx/UNHNPCiCIinViT3VaxBRK3AxGCVkgOMDS9YYmISCZrsuVhZr8HTgQOJXhEdyzBDPP70xuaiIhk\nqmQGzCcBRwGPAF8Gjk+ynIiIZKlkksB6d98LLAHGuPtiYFB6wxIRkUyWzID5OjO7EfgrcJuZAZSm\nNSoREcloybQ8rgI+iK1v9RhwCZrIJyLSqSW7n8dLsfdPxv7oUV0RkU4sUbfVMwRJojswAHgXCAOj\ngaXA0WmPTkREMlI69/MQEZEslcyYx0H7eQDJ7OchIiJZKp37eYiISJZKpuVxBcH2sP8H/C/BOIj2\n2RAR6cSabHm4+1bgmjaIRUREOohk1raaBvwMOCTucNTdc9MVlIiIZLZkxjxuAk4BFsd2+hMRkU4u\nmeSx1t3fTXskIiLSYSSTPN4ws0eB54E9sWNRd/99+sISEZFMlkzyKAV2EuzpARAieOJKyUNEpJNK\n5mmrafWPmVm3tEQjIiIdQjJPW30W+D5QRDAvJBcoAA5Pb2giIpKpkum2ug2YAfw7cCvwaYJuLBER\n6aSSmWG+1d3nAa8AJe5+MzAlrVGJiEhGSyZ57DKz4QTLsJ9iZuqyEhHp5JJJHt8l6K6aC3wS2Ag8\nns6gREQksyUz5rHF3afGXn/CzA4BLI0xiYhIhku0De1JBE9W/dbMZrB/fkcecBcwrE0ilJRUV1cz\ne/Z8AC65ZBKFhYXtHJGIZKNELY/TgUlAH+CWuONhguQhGaa6upqLL57Dyy8HK+bPmfMADz88RQlE\nRFpdo8nD3W8CMLMrtRRJxzB79vxY4sgD4OWXpzF79lymTTujfQMTkayTcMzDzM4BFsReTwGuItjT\n/AfuHk5/eCIikokafdrKzP4TuBkoMLMxwIMET1kVE+zvIRnmkksmceKJDwB7gb0cd9zdXHLJpPYO\nS0SyUKKWx5XAie5eZWY/Bp5w93vNLAQsaZvwJBWFhYU8/PAUZs+eC8CmTeu59967mDDhJI49dnw7\nRyci2SRR8qh196rY61OB3wC4e9TMtClUhiosLNw3xrFwYSkrV64gN7cLTz45h759+zF+/HHtHKGI\nZINEySNsZj0JFkQ8BngOwMwGAjVtEJu00FFHjWbnzh0sWbKYqVMvYe/eve0dUlar/5h00MMrkp0S\nzTD/MfAW8Cpwr7t/ZGZTgXlozKND6Nq1K9XVe5g8+XyeeuoJunbt2t4hZa26x6Svv/5crr/+XC6+\neA7V1dXtHZZI2iR6VPdRM3sZOMzd344d3gXMcPe/NXVhM8sB7gTGEOxAOMPdV8adnwx8j2DeyP3u\nfm/s+JtAZexj77v7VSnXSqitrWXVqlcpKXmXLVuWUF6+kZdf/iv9+w9s5hVziES6EQ6XU1Z2PCUl\nh7VqvB1dQ49Jz5r1AhdeqAcWJDslfFTX3dcB6+LeP53Ctc8H8t19gpkdD9weO4aZ5QE/B8YTJKQF\nZvYEsCN2n1NTqYQcqLa2Fvc/Mnr0ckaNyiXIz6WsWVNJSckWSkpKm3HVCEFOf5vlyxcTDl/GoYf2\na9W4RaTjSGZhxOaaCDwL4O6vEiSKOiOBFe5e6e41wD+Bk4GjgW5m9pyZ/TWWdCRFq1a9zujRy8nP\nzz3g+MCBg1i/fh3hcMum6AwbFmbbtrktuka2qf+Y9IknzmLatE+2d1giaZPO5NED2B73PhLryqo7\nVxl3bgdQAlQBP3X3TwNfAR6MKyNJ84MSRx2zkbi3/Enrww7bSGXlxy2+Traoe0z6ttvmctZZX+B3\nvztLy8JIVktmVd3m2s6Bj5vkuHtt7HVlvXPFwFZgGbACwN2Xm9kWgrW11pFAWVl2P9WSav0+/ngn\nRUUFjZ4fOdJYv34Nw4Y1f23LoUPzWbZsHWVlg5p9jTrZ8/Mr5pvfvJCdOxfxwgtzKSn5LL169Wrv\noNIqe352Dcv2+rVEOpPHAmAy8IiZnQAsiju3FBgWexS4imABxp8C0wkG2L9mZn0JWigfNXWjiood\nrRx65igrK065flVVO6mqOrBrav36Km644TUGDy5m6dJKunaNEg47gwaVcsst4+jSJYdx4/7EhRcO\n5tvfPmZfudtue5v58z/iqafOPOg+W7dWtvjfvjn1y3RDh44gHI7w0ksv0avXAIYNG97eIaVFNv7s\n4nWG+rVEOruE5gDVZraAYLD8OjO71My+GBvn+HeCuSMvAfe5+0fAfUAPM5sPzAamx7VWpEVChEIh\nAK69dhSzZn2Km24aRCQS4e9/D/JzSUk+b721hUgkmAMaiURZvHgrsWKSpJycXEKhEJMnT6aqamd7\nhyOSFmlrebh7FLi63uFlceefAp6qVyYMXJGumDq3/YsCRGMvhwwZxqZNz9Oz51AAunQJMW7cYbzy\nykYmTuzNK69s5IQTevH002vaI+CMsnfvXtaufYNQ6H1ycnYCiX6neY8jjijn6aevoW/fclavfrUF\ndw4RjRYQDvejrGwcJSWHtuBaIq0nnd1WkqF++ct3mTXLqaiopqAgl6FD9zdfzzxzAHPmfMDEib15\n9tm1zJhhnT557Nq1k7Vr72fUqO106dJ0Y93scHJy9rB69WYGDSpplRii0fWsXv0aGzZ8lt69R7TK\nNUVaQk8ydULXXjuKe+6ZxJw5Z3DyyX357/9+b9+5sWMPZenSSior91JZuYc+fbq1Y6SZYe3axzj6\n6B1JJQ6AnJzgc2VlZWzevLlVYgiFQpSX51BT85hmrktGUPLohKJxy1oefnhXwuEDu2BOOulwZs58\ni1NP7XvAZzuj6upqSkrW7BsvSkVZWRkff9w6yaPOEUdEWb/+zVa9ZkOqq6uZNet5Zs16XslKGqRu\nq05j/5dfXbdVTk6I2lq4+eZjD/jMmWcO4POf/xvf/W5wvDMPmG/Y4LTgiWYKCgqprt5NYWHrrCuW\nm5tDKLS+Va7VGG1nLMlQ8ugk+vbtxu9+d0rCzzz//GcAGDashJdeOm/f8blzD35Mt7OIRHaTl9fw\nhMt166r4xS/eYfv2vYTDUYYNK+Eb3xjF73+/jOeeW8vhh3cjEqmlomIxkycP5aqrgrGKN9/czL33\nLiUcrmX37gjnnjuIqVOHsHBhBY899gE/+lHiZfNDofQuaq3tjCUZSh4izVBdHeG6617mppuO5aij\nDgHgqadWc+ONr3HkkT25/PJhXHnlCKqq9vDee0u44YbVXHDBYKqqwvzsZ2/z61+fRM+eBezZE+FL\nX/oH/fsXkZ+fbC9yJ+9LlIygMY8sFI02/Jty6+u8//n8858bGD++bF/iADjnnEFs27aX9euriMYN\nFvXo0Yc9e2ooKMjl6afXcM45g+jZM1gBoKAglzvvnMjxx/fKmPGl+ut0jRkzU9sZy0HU8shCtbVF\nBKvgp8+uXWEKCjrvnIN166ro16/ooOP9+nXjo492sWjRx/zlL+tZv76KsrJCbrppHN26dWHz5mpG\njDjw8d2iory2Cjsp9bczfv115y9/eZ6zz57crAcHJDspeWShcHgQkN5FCz/8sBv9+rVgJLmD69Wr\nK+++e/C/8Zo1OxkypAef/vQArrxyBAsXbuDGG1+nvDxIGH36dGPDht0HlFm2bBvRaGY9mBC/nXGP\nHpXU1tby8MMPMWXKZykoaHzdNOk8Om+/QxY7/PDjcU/fb7M7dkTYu/fYffMZOqNTTunDq69uYvHi\n/QlkzpwP6NmzgH79ivZ1W40c2ZNp04Zz442vEY1GOfPMATz++Cq2bg1ahrt2hbn11n+xeXPmPg5b\nVNSdUAguuGAqf/7zU00XkE5BLY8sVFx8COHwFSxa9ASHHLKBfv26tEp3w86dNXz4YRHh8DiGDu3c\n+3V17dqFO+6YwO23L6Kyci/hcC3Dh5cwc+ZxPPTQigP+vc8/v5znn1/Lo49+wNSpQ/jGN0bxn//5\n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\nSUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10b900590>"
       ]
      }
     ],
     "prompt_number": 53
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Code for setting the style of the notebook\n",
      "from IPython.core.display import HTML\n",
      "def css_styling():\n",
      "    styles = open(\"../theme/custom.css\", \"r\").read()\n",
      "    return HTML(styles)\n",
      "css_styling()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
<<<<<<< HEAD:Lecture-3/Getting-to-know-your-data-with-Pandas.ipynb
        "<link href='http://fonts.googleapis.com/css?family=EB+Garamond' rel='stylesheet' type='text/css'>\n",
        "<link href='http://fonts.googleapis.com/css?family=Alegreya+Sans:100,300,400,500,700,800,900,100italic,300italic,400italic,500italic,700italic,800italic,900italic' rel='stylesheet' type='text/css'>\n",
        "<link href='http://fonts.googleapis.com/css?family=Source+Code+Pro:300,400' rel='stylesheet' type='text/css'>\n",
        "<style>\n",
        "    @font-face {\n",
        "        font-family: \"Computer Modern\";\n",
        "        src: url('http://mirrors.ctan.org/fonts/cm-unicode/fonts/otf/cmunss.otf');\n",
        "    }\n",
        "    .code_cell {\n",
        "        width: 105ex !important ;\n",
        "        margin-bottom: 15px !important;\n",
        "    }\n",
        "    div.cell {\n",
        "        margin-left: auto;\n",
        "        margin-right: auto;\n",
        "        width: 70%;\n",
        "    }    \n",
        "    div.cell.selected {\n",
        "        border: thin rgba(171, 171, 171, 0.5) dashed;\n",
        "    }\n",
        "    h1 {\n",
        "        font-family: 'Alegreya Sans', sans-serif;\n",
        "    }\n",
        "    h2 {\n",
        "        font-family: 'EB Garamond', serif;\n",
        "    }\n",
        "    h3 {\n",
        "        font-family: 'EB Garamond', serif;\n",
        "        margin-top:12px;\n",
        "        margin-bottom: 3px;\n",
        "    }\n",
        "    h4 {\n",
        "        font-family: 'EB Garamond', serif;\n",
        "    }\n",
        "    h5 {\n",
        "        font-family: 'Alegreya Sans', sans-serif;\n",
        "    }\n",
        "    div.text_cell_render {\n",
        "        font-family: 'EB Garamond',Computer Modern, \"Helvetica Neue\", Arial, Helvetica, Geneva, sans-serif;\n",
        "        line-height: 145%;\n",
        "        font-size: 140%;\n",
        "    }\n",
        "    div.input_area {\n",
        "        border-color: rgba(0,0,0,0.10) !important;\n",
        "        background: #fafafa;\n",
        "    }\n",
        "    .CodeMirror {\n",
        "            font-family: \"Source Code Pro\";\n",
        "            font-size: 90%;\n",
        "    }\n",
        "    .prompt {\n",
        "        display: None;\n",
        "    }\n",
        "    .output {\n",
        "        padding-left: 50px;\n",
        "        padding-top: 5px;\n",
        "    }\n",
        "    .output_wrapper {\n",
        "        padding-left: 5px;\n",
        "        padding-top: inherit;\n",
        "    }\n",
        "    div.output_scroll {\n",
        "        width: inherit;\n",
        "    }\n",
        "    .inner_cell {\n",
        "        padding-left: 5px;\n",
        "    }\n",
        "    .text_cell_render h1 {\n",
        "        font-weight: 200;\n",
        "        font-size: 50pt;\n",
        "        line-height: 100%;\n",
        "        color:#CD2305;\n",
        "        margin-bottom: 0.5em;\n",
        "        margin-top: 0.5em;\n",
        "        display: block;\n",
        "    }\n",
        "    .text_cell_render h5 {\n",
        "        font-weight: 300;\n",
        "        font-size: 16pt;\n",
        "        color: #CD2305;\n",
        "        font-style: italic;\n",
        "        margin-bottom: .5em;\n",
        "        margin-top: 0.5em;\n",
        "        display: block;\n",
        "    }\n",
        "    .warning {\n",
        "        color: rgb( 240, 20, 20 )\n",
        "        }  \n",
        "</style>\n",
        "<script>\n",
        "    MathJax.Hub.Config({\n",
        "                        TeX: {\n",
        "                           extensions: [\"AMSmath.js\"]\n",
        "                           },\n",
        "                tex2jax: {\n",
        "                    inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ],\n",
        "                    displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ]\n",
        "                },\n",
        "                displayAlign: 'center', // Change this to 'center' to center equations.\n",
        "                \"HTML-CSS\": {\n",
        "                    styles: {'.MathJax_Display': {\"margin\": 4}}\n",
        "                }\n",
        "        });\n",
=======
        "<link href='http://fonts.googleapis.com/css?family=EB+Garamond' rel='stylesheet' type='text/css'>\r\n",
        "<link href='http://fonts.googleapis.com/css?family=Alegreya+Sans:100,300,400,500,700,800,900,100italic,300italic,400italic,500italic,700italic,800italic,900italic' rel='stylesheet' type='text/css'>\r\n",
        "<link href='http://fonts.googleapis.com/css?family=Source+Code+Pro:300,400' rel='stylesheet' type='text/css'>\r\n",
        "<style>\r\n",
        "    @font-face {\r\n",
        "        font-family: \"Computer Modern\";\r\n",
        "        src: url('http://mirrors.ctan.org/fonts/cm-unicode/fonts/otf/cmunss.otf');\r\n",
        "    }\r\n",
        "    .code_cell {\r\n",
        "        width: 105ex !important ;\r\n",
        "        margin-bottom: 15px !important;\r\n",
        "    }\r\n",
        "    div.cell {\r\n",
        "        margin-left: auto;\r\n",
        "        margin-right: auto;\r\n",
        "        width: 70%;\r\n",
        "    }    \r\n",
        "    div.cell.selected {\r\n",
        "        border: thin rgba(171, 171, 171, 0.5) dashed;\r\n",
        "    }\r\n",
        "    h1 {\r\n",
        "        font-family: 'Alegreya Sans', sans-serif;\r\n",
        "    }\r\n",
        "    h2 {\r\n",
        "        font-family: 'EB Garamond', serif;\r\n",
        "    }\r\n",
        "    h3 {\r\n",
        "        font-family: 'EB Garamond', serif;\r\n",
        "        margin-top:12px;\r\n",
        "        margin-bottom: 3px;\r\n",
        "    }\r\n",
        "    h4 {\r\n",
        "        font-family: 'EB Garamond', serif;\r\n",
        "    }\r\n",
        "    h5 {\r\n",
        "        font-family: 'Alegreya Sans', sans-serif;\r\n",
        "    }\r\n",
        "    div.text_cell_render {\r\n",
        "        font-family: 'EB Garamond',Computer Modern, \"Helvetica Neue\", Arial, Helvetica, Geneva, sans-serif;\r\n",
        "        line-height: 145%;\r\n",
        "        font-size: 140%;\r\n",
        "    }\r\n",
        "    div.input_area {\r\n",
        "        border-color: rgba(0,0,0,0.10) !important;\r\n",
        "        background: #fafafa;\r\n",
        "    }\r\n",
        "    .CodeMirror {\r\n",
        "            font-family: \"Source Code Pro\";\r\n",
        "            font-size: 90%;\r\n",
        "    }\r\n",
        "    .prompt {\r\n",
        "        display: None;\r\n",
        "    }\r\n",
        "    .output {\r\n",
        "        padding-left: 50px;\r\n",
        "        padding-top: 5px;\r\n",
        "    }\r\n",
        "    .output_wrapper {\r\n",
        "        padding-left: 5px;\r\n",
        "        padding-top: inherit;\r\n",
        "    }\r\n",
        "    div.output_scroll {\r\n",
        "        width: inherit;\r\n",
        "    }\r\n",
        "    .inner_cell {\r\n",
        "        padding-left: 5px;\r\n",
        "    }\r\n",
        "    .text_cell_render h1 {\r\n",
        "        font-weight: 200;\r\n",
        "        font-size: 50pt;\r\n",
        "        line-height: 100%;\r\n",
        "        color:#CD2305;\r\n",
        "        margin-bottom: 0.5em;\r\n",
        "        margin-top: 0.5em;\r\n",
        "        display: block;\r\n",
        "    }\r\n",
        "    .text_cell_render h5 {\r\n",
        "        font-weight: 300;\r\n",
        "        font-size: 16pt;\r\n",
        "        color: #CD2305;\r\n",
        "        font-style: italic;\r\n",
        "        margin-bottom: .5em;\r\n",
        "        margin-top: 0.5em;\r\n",
        "        display: block;\r\n",
        "    }\r\n",
        "    .warning {\r\n",
        "        color: rgb( 240, 20, 20 )\r\n",
        "        }  \r\n",
        "</style>\r\n",
        "<script>\r\n",
        "    MathJax.Hub.Config({\r\n",
        "                        TeX: {\r\n",
        "                           extensions: [\"AMSmath.js\"]\r\n",
        "                           },\r\n",
        "                tex2jax: {\r\n",
        "                    inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ],\r\n",
        "                    displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ]\r\n",
        "                },\r\n",
        "                displayAlign: 'center', // Change this to 'center' to center equations.\r\n",
        "                \"HTML-CSS\": {\r\n",
        "                    styles: {'.MathJax_Display': {\"margin\": 4}}\r\n",
        "                }\r\n",
        "        });\r\n",
>>>>>>> L3:Lecture-3/Getting to know your data with Pandas.ipynb
        "</script>"
       ],
       "metadata": {},
       "output_type": "pyout",
<<<<<<< HEAD:Lecture-3/Getting-to-know-your-data-with-Pandas.ipynb
       "prompt_number": 2,
       "text": [
        "<IPython.core.display.HTML at 0x3a16278>"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
=======
       "prompt_number": 63,
       "text": [
        "<IPython.core.display.HTML at 0x10abbaa90>"
       ]
      }
     ],
     "prompt_number": 63
>>>>>>> L3:Lecture-3/Getting to know your data with Pandas.ipynb
    }
   ],
   "metadata": {}
  }
 ]
}